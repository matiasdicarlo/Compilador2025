
$Prueba Operaciones Varias

DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado, prom
   float_array[5] : mi_arreglo
   boolean : es_igual, mayor, resultado_all
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3
   c := 10
   x := 20.5
   y := -3.2
   mi_arreglo[0] := x + y
   
   DISPLAY("Valor de la variable a:")
   DISPLAY(a)
   DISPLAY("Valor de la variable b:")
   DISPLAY(b)
   DISPLAY("Valor de la variable c:")
   DISPLAY(c)
   DISPLAY("Valor de la variable x:")
   DISPLAY(x)
   DISPLAY("Valor de la variable y:")
   DISPLAY(y)

   resultado := (a + b * c) / x
   DISPLAY("Valor de la variable resultado:")
   DISPLAY(resultado)  
   a := a + 1
   DISPLAY("Valor de la variable a+1:")
   DISPLAY(a)

   DISPLAY("Valor de la variable mi_arreglo[0]:")
   DISPLAY(mi_arreglo[0])
   
   es_igual := resultado == 10
   CONDITION(es_igual==true)THEN
            DISPLAY("La variable resultado es igual a 10")
   ELSE
            DISPLAY("La variable resultado NO es igual a 10")  
   END
          
   mayor := x > y and not es_igual
   CONDITION(mayor==true)THEN
            DISPLAY("Display desde CONDITION, x>y")
   END

   LOOP WHEN(a<8)THEN
        DISPLAY("ITERANDO EN LOOP WHEN")
        a:=a+1
   END_LOOP
   
    resultado_all:= all(>, 5.8, [10.0, 9.2, 6.2])
    CONDITION (resultado_all == true)THEN
        DISPLAY("FUNCION ALL, todos los elementos son mayores que 5.8:")
    END
  
   prom := promedio_ponderado([10.5, 20.4, 30.4], [0.2, 0.3, 0.5])
   DISPLAY("El resultado del Promedio ponderado entre [10.5, 20.4, 30.4], [0.2, 0.3, 0.5] es: ") 
   DISPLAY(prom)

  
    

ENDPROGRAM.SECTION

(*Resultado esperado:
Valor de la variable a:
5
Valor de la variable b:
3
Valor de la variable c:
10
Valor de la variable x:
20.500000
Valor de la variable y:
-3.200000
Valor de la variable resultado:
1.707317
Valor de la variable a+1:
6
Valor de la variable mi_arreglo[0]:
17.300000
La variable resultado NO es igual a 10
Display desde CONDITION, x>y
ITERANDO EN LOOP WHEN
ITERANDO EN LOOP WHEN
FUNCION ALL, todos los elementos son mayores que 5.8:
El resultado del Promedio ponderado entre [10.5, 20.4, 30.4], [0.2, 0.3, 0.5] es:
23.420000
*)

----------------------------------------

$Prueba Operaciones Aritméticas y Relacionales

DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado
   float_array[5] : mi_arreglo
   boolean : es_igual, mayor
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3
   c := 10
   x := 20.5
   y := -3.2
   mi_arreglo[0] := x + y
   
   resultado := (a + b * c) / x
   DISPLAY("Valor de la variable resultado:")
   DISPLAY(resultado)  
   a := a + 1
   DISPLAY("Valor de la variable a:")
   DISPLAY(a)
   DISPLAY("mi_arreglo[0]:")
   DISPLAY(mi_arreglo[0])
   
   es_igual := resultado == 10
   mayor := x > y and not es_igual
    

ENDPROGRAM.SECTION

(*Resultado esperado:
Valor de la variable resultado:
1.707317
Valor de la variable a:
6
mi_arreglo[0]:
17.300000
*)



--------------------------------------




$Prueba Loop

DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado
   float_array[5] : mi_arreglo
   boolean : es_igual, mayor
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3
   c := 10
   x := 20.5
   y := -3.2
   mi_arreglo[0] := x + y


   (* Ciclo LOOP *)
   LOOP WHEN (a < c) THEN
      DISPLAY("Iterando en el ciclo LOOP")
      DISPLAY(a)
      a := a + 1
   END_LOOP

ENDPROGRAM.SECTION



(* Resultado Esperado: 
Iterando en el ciclo LOOP
5
Iterando en el ciclo LOOP
6
Iterando en el ciclo LOOP
7
Iterando en el ciclo LOOP
8
Iterando en el ciclo LOOP
9
*)

---------------------------------



$Prueba Backward-Loop

DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado
   float_array[5] : mi_arreglo
   boolean : es_igual, mayor
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3
   c := 10
   x := 20.5
   y := -3.2
   mi_arreglo[0] := x + y


   (* Ciclo LOOP *)
   BACKWARD_LOOP WHEN (a < c) THEN
      DISPLAY("Iterando en el ciclo BACKWARD_LOOP")
      DISPLAY(a)
      a := a + 1
   END_LOOP

ENDPROGRAM.SECTION

(* Resultado esperado:
6
Iterando en el ciclo BACKWARD_LOOP
7
Iterando en el ciclo BACKWARD_LOOP
8
Iterando en el ciclo BACKWARD_LOOP
9
Iterando en el ciclo BACKWARD_LOOP
10
Iterando en el ciclo BACKWARD_LOOP
*)


----------------------------------------


$Prueba Condition

DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado
   float_array[6] : mi_arreglo
   boolean : es_igual, mayor
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3
   c := 10
   x := 20.5
   y := -3.2
   
   mayor := x > y 

 (* Sentencia de selección *)
   CONDITION (mayor == true) THEN
      DISPLAY("x es mayor que y")
   ELSE
      DISPLAY("x no es mayor que y")
   END

ENDPROGRAM.SECTION

(* Resultado esperado:
x es mayor que y
*)




----------------------------------------



$Prueba Condition Backward

DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado
   float_array[6] : mi_arreglo
   boolean : es_igual, mayor
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3
   c := 10
   x := 20.5
   y := -3.2
   
   mayor := x > y 

 (* Sentencia de selección *)
   BACKWARD_CONDITION (mayor == true) THEN
      DISPLAY("x es mayor que y")
      DISPLAY("El valor de c:")
      DISPLAY(c)
      c := c - 1
   ELSE_BACKWARD
      DISPLAY("x no es mayor que y")
      DISPLAY("El valor de a:")
      DISPLAY(a)
      a := a + 7
   END

ENDPROGRAM.SECTION

(* Resultado esperado:
9
El valor de c:
x es mayor que y
*)


---------------------------------------



$Prueba funcion ALL


DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado
   float_array[5] : mi_arreglo
   boolean : es_igual, mayor
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3
   c := 10
   x := 20.5
   y := -3.2
   mi_arreglo[0] := x + y
   
   mayor := all(>, 5.8, [10.0, 9.2, 6.2])
   CONDITION (mayor == true)THEN
        DISPLAY("Todos los elementos son mayores que 5.8:")
   END


ENDPROGRAM.SECTION


(* Resultado esperado:
Todos los elementos son mayores que 5.8:
*)


---------------------------------------


$Prueba funcion ANY

DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado
   float_array[5] : mi_arreglo
   boolean : es_igual, mayor
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3
   c := 10
   x := 20.5
   y := -3.2
   mi_arreglo[0] := x + y
   
   mayor := any(>, 5.8, [10.0, 9.2, 6.2])
   CONDITION (mayor == true)THEN
        DISPLAY("Ninguno de los elementos es mayor que 5.8:")
   END


ENDPROGRAM.SECTION


(* Resultado esperado:
Ninguno de los elementos es mayor que 5.8:
*)


---------------------------------------------------



$Prueba funcion PROMEDIO PONDERADO-tema especial

DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado, prom
   float_array[5] : mi_arreglo
   boolean : es_igual, mayor
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3
   resultado:= a+b
   DISPLAY("El resultado de a+b es: ")
   DISPLAY(resultado)
   prom := promedio_ponderado([10.5, 20.4, 30.4], [0.2, 0.3, 0.5])
   DISPLAY("El resultado del Promedio ponderado entre [10.5, 20.4, 30.4], [0.2, 0.3, 0.5] es: ") 
   DISPLAY(prom)

ENDPROGRAM.SECTION


(* Resultado esperado
El resultado de a+b es:
8.000000
El resultado del Promedio ponderado entre [10.5, 20.4, 30.4], [0.2, 0.3, 0.5] es:
23.420000 *)


----------------------------------------------

$Prueba funcion PROMEDIO PONDERADO- Variantes

DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado, prom
   float_array[3] : mi_arreglo 
   boolean : es_igual, mayor
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3
   mi_arreglo:=[10.5, 20.4, 30.4] (*Utilizando como argumento un array declarado antes*)
   resultado:= a+b
   DISPLAY("El resultado de a+b es: ")
   DISPLAY(resultado)
   prom := promedio_ponderado(mi_arreglo, [0.2, 0.3, 0.5])
   DISPLAY("El resultado del Promedio ponderado entre mi_arreglo y [0.2, 0.3, 0.5] es: ") 
   DISPLAY(prom)

ENDPROGRAM.SECTION

(* Resultado esperado 
El resultado de a+b es:
8.000000
El resultado del Promedio ponderado entre mi_arreglo y [0.2, 0.3, 0.5] es:
23.420000 *)


----------------------------------------------------


$Prueba funcion PROMEDIO PONDERADO- Variantes 2

DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado, prom
   float_array[3] : mi_arreglo 
   float_array[3] : mi_arregloPesos 
   boolean : es_igual, mayor
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3

   mi_arreglo:=[10.5, 20.4, 30.4] (*Utilizando como argumento dos arrays declarados antes*)
   mi_arregloPesos := [0.2, 0.3, 0.5]


   resultado:= a+b
   DISPLAY("El resultado de a+b es: ")
   DISPLAY(resultado)
   prom := promedio_ponderado(mi_arreglo, mi_arregloPesos)
   DISPLAY("El resultado del Promedio ponderado entre mi_arreglo y mi_arregloPesos es: ") 
   DISPLAY(prom)

ENDPROGRAM.SECTION


(*Resultado esperado:
El resultado de a+b es:
8.000000
El resultado del Promedio ponderado entre mi_arreglo y mi_arregloPesos es:
23.420000 *)


------------------------------------------------

$Prueba funcion PROMEDIO PONDERADO- Con Prueba de Error Diferentes Longitudes

DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado, prom
   float_array[1] : mi_arreglo 
   float_array[3] : mi_arregloPesos 
   boolean : es_igual, mayor
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3

   mi_arreglo:=[10.5] (* Como su longitud es 1, y la de los pesos es 3, debe dar resultado=0.0 por enunciado*)
   mi_arregloPesos := [0.2, 0.3, 0.5]


   resultado:= a+b
   DISPLAY("El resultado de a+b es: ")
   DISPLAY(resultado)
   prom := promedio_ponderado(mi_arreglo, mi_arregloPesos)
   DISPLAY("El resultado del Promedio ponderado entre mi_arreglo y mi_arregloPesos -CON ERROR DEBE SER 0.0- es: ") 
   DISPLAY(prom)

ENDPROGRAM.SECTION

(*Resultado Esperado:
El resultado de a+b es:
8.000000
ERROR PP: Las listas deben tener la misma longitud
El resultado del Promedio ponderado entre mi_arreglo y mi_arregloPesos -CON ERROR DEBE SER 0.0- es:
0.000000
 *)


--------------------------------------------------

$Prueba funcion PROMEDIO PONDERADO- Con Prueba de Error Suma pesos diferente de 1
DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado, prom
   float_array[3] : mi_arreglo 
   float_array[3] : mi_arregloPesos 
   boolean : es_igual, mayor
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3

   mi_arreglo:=[10.5, 5.5, 6.8 ] 
   mi_arregloPesos := [0.1, 0.3, 0.5 ] (* Como la suma de los pesos no es 1, debe dar resultado=0.0 por enunciado*)


   resultado:= a+b
   DISPLAY("El resultado de a+b es: ")
   DISPLAY(resultado)
   prom := promedio_ponderado(mi_arreglo, mi_arregloPesos)
   DISPLAY("El resultado del Promedio ponderado entre mi_arreglo y mi_arregloPesos -CON ERROR DEBE SER 0.0- es: ") 
   DISPLAY(prom)

ENDPROGRAM.SECTION

(*Resultado Esperado:
El resultado de a+b es:
8.000000
El resultado del Promedio ponderado entre mi_arreglo y mi_arregloPesos -CON ERROR DEBE SER 0.0- es:
0.000000*)

---------------------------------------------------------------


$Prueba instruccion INPUT_INT

DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3

   DISPLAY("Ingrese el valor de c desde input_int: ")
   c:=INPUT_INT()
   resultado:= a+b+c
   DISPLAY("El resultado de a+b+c con c desde input_int es: ")
   DISPLAY(resultado)
  

ENDPROGRAM.SECTION

(*Resultado Esperado:
Ingrese el valor de c desde input_int:
Si se ingresa el valor 1:   
El resultado de a+b+c con c desde input_int es:
9.000000 *)

-----------------------------------------------


$Prueba instruccion INPUT_FLOAT

DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   y := 3.2
   
   DISPLAY("Ingrese el valor de x desde input_float: ")
   x:=INPUT_INT()
   resultado:= y+x
   DISPLAY("El resultado de y+x con x desde INPUT_FLOAT es: ")
   DISPLAY(resultado)
  

ENDPROGRAM.SECTION

(*Resultado Esperado:
Ingrese el valor de x desde input_float:
5.2
El resultado de y+x con x desde INPUT_FLOAT es:
8.200000 *)

-------------------------------------------------------


$Prueba instruccion INPUT_BOOL

DECLARE.SECTION
    boolean: entrada_booleana

ENDDECLARE.SECTION
   
PROGRAM.SECTION
   
    DISPLAY("Ingrese la entrada booleana 1 para TRUE o 0 para FALSE: ")
    entrada_booleana:= INPUT_BOOL()
    CONDITION(entrada_booleana==true) THEN
         DISPLAY("La entrada fue True")
    ELSE
          DISPLAY("La entrada fue False")
    END

ENDPROGRAM.SECTION

(*Resultado esperado:
Ingrese la entrada booleana 1 para TRUE o 0 para FALSE:
Ingresando un 1
La entrada fue True*)

-------------------------------------------------------

$Prueba instruccion INPUT_ARRAY

DECLARE.SECTION
   float_array[2]: arreglo_entrada

ENDDECLARE.SECTION
   
PROGRAM.SECTION
   
    DISPLAY("Ingrese la entrada a cargar en el array: ")
    arreglo_entrada:= INPUT_ARRAY(2)  (*se debe poner la longitud del array*)
    DISPLAY("Primer elemento del array:")
    DISPLAY(arreglo_entrada[0])
    DISPLAY("Segundo elemento del array:")
    DISPLAY(arreglo_entrada[1])

ENDPROGRAM.SECTION


(*Resultado Esperado:
Ingrese la entrada a cargar en el array:
Ingresando 5.3
Ingresando 2.5
Primer elemento del array:
5.300000
Segundo elemento del array:
2.500000
 *)
------------------------------------------------------------







$Prueba ArrayBasico

DECLARE.SECTION
   float_array[3] : numeros
   float : resultado
ENDDECLARE.SECTION

PROGRAM.SECTION
   numeros[0] := 1.5
   numeros[1] := 2.5
   numeros[2] := 3.0

   resultado := numeros[0] + numeros[1] + numeros[2]

   DISPLAY("La suma del array es:")
   DISPLAY(resultado)
ENDPROGRAM.SECTION


(*Resultado Esperado:
La suma del array es:
7.000000
 *)


-----------------------------------------------

$Prueba DISPLAY Array

DECLARE.SECTION
   float_array[3] : numeros
   float : resultado
ENDDECLARE.SECTION

PROGRAM.SECTION
   numeros[0] := 1.5
   numeros[1] := 2.5
   numeros[2] := 3.0

   resultado := numeros[0] + numeros[1] + numeros[2]

   DISPLAY("La suma del array es:")
   DISPLAY(resultado)

  DISPLAY("El array es: ")
  DISPLAY(numeros)

ENDPROGRAM.SECTION

(*Resultado Esperado:
La suma del array es:
7.000000
El array es:
1.500000
2.500000
3.000000
 *)

--------------------------------------------------------------------------------


$Prueba NegacionesYCortocircuitoBooleano

DECLARE.SECTION
   boolean : a, b, c
ENDDECLARE.SECTION

PROGRAM.SECTION
   a := true
   b := false
   c := false

   CONDITION (not b and not c or a) THEN
      DISPLAY("Se cumple la logica compuesta")
   ELSE
      DISPLAY("No se cumple")
   END
ENDPROGRAM.SECTION



(*Resultado Esperado:
Se cumple la logica compuesta
 *)

------------------------------------------------------


$Prueba LoopConCortocuito

DECLARE.SECTION
   integer : a
ENDDECLARE.SECTION

PROGRAM.SECTION
   a := 0

   LOOP WHEN (false or a < 3) THEN
      DISPLAY("a:")
      DISPLAY(a)
      a := a + 1
   END_LOOP

ENDPROGRAM.SECTION

(*Resultado Esperado:
a:
0
a:
1
a:
2
 *)

---------------------------------------------------


$Prueba LoopConCortocircuito

DECLARE.SECTION
   integer : a
ENDDECLARE.SECTION

PROGRAM.SECTION
   a := 0

   LOOP WHEN (a < 5 and a != 3) THEN
      DISPLAY("a:")
      DISPLAY(a)
      a := a + 1
   END_LOOP

ENDPROGRAM.SECTION

(*Resultado Esperado:
a:
0
a:
1
a:
2
 *)


----------------------------------------------------------------

$Prueba Más de un promedio ponderado

DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado, prom, prom_1
   float_array[5] : mi_arreglo

ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3
   c := 10
   x := 20.5
   y := -3.2
   mi_arreglo[0] := x + y
   
   DISPLAY("Valor de la variable a:")
   DISPLAY(a)
   DISPLAY("Valor de la variable b:")
   DISPLAY(b)
   DISPLAY("Valor de la variable c:")
   DISPLAY(c)
   DISPLAY("Valor de la variable x:")
   DISPLAY(x)
   DISPLAY("Valor de la variable y:")
   DISPLAY(y)


  
   prom := promedio_ponderado([10.5, 20.4, 30.4], [0.2, 0.3, 0.5])
   DISPLAY("El resultado del Promedio ponderado entre [10.5, 20.4, 30.4], [0.2, 0.3, 0.5] es: ") 
   DISPLAY(prom)
	
  prom_1 := promedio_ponderado([10.8, 19.4, 31.4], [0.1, 0.4, 0.5])
   DISPLAY("El resultado del Promedio ponderado entre [10.8, 19.4, 31.4],  [0.1, 0.4, 0.5] es: ") 
   DISPLAY(prom_1)

  
(*Resultado Esperado:
Valor de la variable a:
5
Valor de la variable b:
3
Valor de la variable c:
10
Valor de la variable x:
20.500000
Valor de la variable y:
-3.200000
El resultado del Promedio ponderado entre [10.5, 20.4, 30.4], [0.2, 0.3, 0.5] es:
23.420000
El resultado del Promedio ponderado entre [10.8, 19.4, 31.4],  [0.1, 0.4, 0.5] es:
24.540000
 *)


---------------------------------------------------------

$Prueba Varios Promedios Ponderados, ALL y ANY

DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado, prom, prom_1
   float_array[5] : mi_arreglo
   boolean : mayor

ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3
   c := 10
   x := 20.5
   y := -3.2
   mi_arreglo[0] := x + y
   
   DISPLAY("Valor de la variable a:")
   DISPLAY(a)
   DISPLAY("Valor de la variable b:")
   DISPLAY(b)
   DISPLAY("Valor de la variable c:")
   DISPLAY(c)
   DISPLAY("Valor de la variable x:")
   DISPLAY(x)
   DISPLAY("Valor de la variable y:")
   DISPLAY(y)

  mayor := any(>, 5.8, [10.0, 9.2, 6.2])
   CONDITION (mayor == true)THEN
        DISPLAY("Ninguno de los elementos es mayor que 5.8:")
   END

  
   prom := promedio_ponderado([10.5, 20.4, 30.4], [0.2, 0.3, 0.5])
   DISPLAY("El resultado del Promedio ponderado entre [10.5, 20.4, 30.4], [0.2, 0.3, 0.5] es: ") 
   DISPLAY(prom)
	
  prom_1 := promedio_ponderado([10.8, 19.4, 31.4], [0.1, 0.4, 0.5])
   DISPLAY("El resultado del Promedio ponderado entre [10.8, 19.4, 31.4],  [0.1, 0.4, 0.5] es: ") 
   DISPLAY(prom_1)

     mayor := all(>, 5.8, [10.0, 9.2, 6.2])
   CONDITION (mayor == true)THEN
        DISPLAY("Todos los elementos son mayores que 5.8:")
   END

ENDPROGRAM.SECTION

(*Resultado Esperado:
Valor de la variable a:
5
Valor de la variable b:
3
Valor de la variable c:
10
Valor de la variable x:
20.500000
Valor de la variable y:
-3.200000
Ninguno de los elementos es mayor que 5.8:
El resultado del Promedio ponderado entre [10.5, 20.4, 30.4], [0.2, 0.3, 0.5] es:
23.420000
El resultado del Promedio ponderado entre [10.8, 19.4, 31.4],  [0.1, 0.4, 0.5] es:
24.540000
Todos los elementos son mayores que 5.8:
 *)



