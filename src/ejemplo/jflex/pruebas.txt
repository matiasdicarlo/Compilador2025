$ Programa de Prueba 1


DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado
   float_array[5] : mi_arreglo
   boolean : es_igual, mayor
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3
   c := 10
   x := 20.5
   y := -3.2
   mi_arreglo[0] := x + y


   (* Operaciones aritméticas *)
   resultado := (a + b * c) / x


   (* Comparaciones *)
   es_igual := resultado == 10
   mayor := x > y and not es_igual


   (* Ciclo LOOP *)
   LOOP WHEN (a < c) THEN
      DISPLAY("Iterando en el ciclo LOOP")
      a := a + 1
   END_LOOP


   (* Ciclo BACKWARD_LOOP *)
   BACKWARD_LOOP WHEN (c > b) THEN
      DISPLAY("Iterando hacia atrás en el ciclo BACKWARD_LOOP")
      c := c - 1
      a := a + 7
   END_LOOP


   (* Sentencia de selección *)
   CONDITION (mayor == true) THEN
      DISPLAY("x es mayor que y")
   ELSE
      DISPLAY("x no es mayor que y")
   END


   (* Operaciones con arreglos *)
   resultado := all(<, 5.8, mi_arreglo)
   DISPLAY("Todos los elementos son mayores que x:")


   (* Entrada y salida *)
   DISPLAY("Resultado final:")
   a := INPUT_INT()
   b := a + INPUT_INT()


   (* Comentarios multilínea anidados *)
   (* Nivel 1
      [* Nivel 2
         {* Nivel 3
            (* Otro nivel 1 *)
         *}
      *]
   *)
ENDPROGRAM.SECTION




________________






$ Programa de Prueba 2


DECLARE.SECTION
   integer: contador, limite
   float: suma, promedio
   float_array[5] : datos
   boolean : es_valido, todos_cumplen
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Inicialización de variables *)
   contador := 0
   limite := 5
   suma := 0.0
   datos := [10.5, -3.2, 7.8, 0.0, 4.2]
   es_valido := true

    suma := INPUT_INT()

   (* Verificar si todos los elementos del arreglo cumplen una condición *)
   todos_cumplen := all(<, y, datos)
   CONDITION (todos_cumplen) THEN
      DISPLAY("Todos los elementos son mayores a 5.")
   ELSE
      DISPLAY("Hay elementos menores o iguales a 5.")
   END
    

   (* Calcular la suma y el promedio *)
   LOOP WHEN (contador < limite) THEN
      suma := suma + datos[0]
      contador := contador + 1
      CONTINUE
   END_LOOP
   promedio := suma / limite
   DISPLAY("Suma total:")
   DISPLAY("Promedio:")


   (* Verificar si el promedio es válido *)
   CONDITION (promedio >= 0.0) THEN
      DISPLAY("El promedio es válido.")
   ELSE
      es_valido := false
      DISPLAY("El promedio no es válido.")
   END


   (* Comentarios multilínea anidados *)
   (* Este comentario explica la lógica:
      [* Contamos elementos mientras
         {* Calculamos la suma y promedio *}
      *]
   *)


prom := promedio_ponderado([10.5, 20.4, 30.4], [0.2, 0.3, 0.5])
(* prom := promedio_ponderado([], [])  Da a dar error sintactico *)
prom := promedio_ponderado([10.2, 200.2], [0.3]) 




ENDPROGRAM.SECTION








________________






$ Programa de Prueba 3


DECLARE.SECTION
   integer: i, limite, suma
   float: promedio, valor_minimo
   float_array[4] : datos
   boolean : resultado, valido
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Inicialización *)
   i := 0
   limite := 4
   suma := 0
   datos := [5.0, 12.3, -4.7, 8.1]
   valor_minimo := 0.0
   resultado := true


   (* Ciclo para calcular la suma de valores mayores a 'valor_minimo' *)
   LOOP WHEN (i < limite) THEN
      CONDITION (datos[4] > valor_minimo) THEN
         suma := suma + datos[4]
      ELSE
         DISPLAY("El valor es menor o igual a")
      END
      i := i + 1
   END_LOOP


   (* Calcular el promedio *)
   promedio := suma / limite
   DISPLAY("Suma total:")
   
   (* Verificar si el promedio cumple ciertas condiciones *)
   CONDITION (promedio >= 0.0 and promedio <= 10.0) THEN
      valido := true
      DISPLAY("El promedio es válido.")
   ELSE
      valido := false
      DISPLAY("El promedio no es válido.")
   END


   (* Operación 'all' para verificar valores en el arreglo *)
   resultado :=  all(==, var+3.5, [5.3, 2.1, .5])


ENDPROGRAM.SECTION

________________


$ Programa de Prueba 4

DECLARE.SECTION
   integer : a, b, c
ENDDECLARE.SECTION

PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3
   c := 10

   (* Ciclo LOOP *)
   LOOP WHEN (a < c) THEN
      DISPLAY("Iterando en el ciclo LOOP")
      a := a + 1
      b := b + 7
   END_LOOP

   (* Ciclo BACKWARD_LOOP *)
   BACKWARD_LOOP WHEN (c > b) THEN
      DISPLAY("Iterando hacia atrás en el ciclo BACKWARD_LOOP")
      c := c - 1
      a := a + 7
   END_LOOP
ENDPROGRAM.SECTION


________________



$ Programa de Prueba 5 


DECLARE.SECTION
   integer : a, b, c
   float : x, y, resultado
   boolean : es_igual, mayor
ENDDECLARE.SECTION


PROGRAM.SECTION
   (* Declaraciones iniciales *)
   a := 5
   b := 3
   c := 10
   x := 20.5
   y := -3.2

   (* Operaciones aritméticas *)
   resultado := (a + b * c) / x


   (* Comparaciones *)
   es_igual := resultado == 10
   mayor := x > y and not es_igual

   (* Sentencia de selección *)
   CONDITION (mayor == true) THEN
      DISPLAY("x es mayor que y")
      a := a + 1
   ELSE
      DISPLAY("x no es mayor que y")
      b := b + 7
   END

   (* Sentencia de selección *)
   BACKWARD_CONDITION (mayor == true) THEN
      DISPLAY("x es mayor que y")
      c := c - 1
   ELSE_BACKWARD
      DISPLAY("x no es mayor que y")
      a := a + 7
   END

ENDPROGRAM.SECTION