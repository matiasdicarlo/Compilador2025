
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ejemplo.jflex;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Hashtable;
import java.util.Collections;
import compilador.ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\003\010\000\002\013" +
    "\004\000\002\013\002\000\002\002\005\000\002\002\010" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\031\005\000\002\031\003\000\002\011\004\000\002" +
    "\011\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\005\005\000\002\005\010" +
    "\000\002\006\003\000\002\006\003\000\002\007\007\000" +
    "\002\007\011\000\002\007\011\000\002\014\007\000\002" +
    "\014\011\000\002\014\011\000\002\015\007\000\002\015" +
    "\007\000\002\012\004\000\002\012\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\030\006\000\002" +
    "\032\003\000\002\032\003\000\002\021\003\000\002\022" +
    "\003\000\002\022\005\000\002\023\005\000\002\023\003" +
    "\000\002\025\004\000\002\025\003\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\003\000\002\027" +
    "\012\000\002\027\012\000\002\027\012\000\002\027\012" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\017" +
    "\005\000\002\017\005\000\002\017\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\005\000" +
    "\002\020\004\000\002\020\003\000\002\020\003\000\002" +
    "\020\006\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\006\000\002\036\006\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\004\004\005\001\002\000\004\002\276\001" +
    "\002\000\014\005\ufffe\011\014\012\007\013\011\014\013" +
    "\001\002\000\004\005\030\001\002\000\004\010\ufff9\001" +
    "\002\000\004\010\026\001\002\000\004\010\ufffa\001\002" +
    "\000\014\005\ufffe\011\014\012\007\013\011\014\013\001" +
    "\002\000\004\015\015\001\002\000\004\010\ufffb\001\002" +
    "\000\004\017\016\001\002\000\004\016\017\001\002\000" +
    "\004\010\020\001\002\000\004\024\022\001\002\000\014" +
    "\005\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\001\002\000" +
    "\016\005\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\025\023" +
    "\001\002\000\004\024\022\001\002\000\014\005\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\001\002\000\004\005\uffff" +
    "\001\002\000\004\024\022\001\002\000\014\005\ufffd\011" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\001\002\000\004\006\031" +
    "\001\002\000\016\024\046\027\044\030\043\035\034\036" +
    "\033\057\035\001\002\000\026\007\ufff3\024\ufff3\027\ufff3" +
    "\030\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\057" +
    "\ufff3\001\002\000\040\017\101\020\054\021\070\023\066" +
    "\024\075\043\064\054\060\060\061\061\100\062\103\063" +
    "\057\064\052\066\055\067\074\070\102\001\002\000\040" +
    "\017\101\020\054\021\070\023\066\024\075\043\064\054" +
    "\060\060\061\061\100\062\103\063\057\064\052\066\055" +
    "\067\074\070\102\001\002\000\004\064\251\001\002\000" +
    "\020\007\250\024\046\027\044\030\043\035\034\036\033" +
    "\057\035\001\002\000\026\007\ufff5\024\ufff5\027\ufff5\030" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\057\ufff5" +
    "\001\002\000\026\007\ufff1\024\ufff1\027\ufff1\030\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\057\ufff1\001\002" +
    "\000\026\007\ufff2\024\ufff2\027\ufff2\030\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\057\ufff2\001\002\000\026" +
    "\007\ufff4\024\ufff4\027\ufff4\030\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\057\ufff4\001\002\000\040\017\101" +
    "\020\054\021\070\023\066\024\075\043\064\054\060\060" +
    "\061\061\100\062\103\063\057\064\052\066\055\067\074" +
    "\070\102\001\002\000\040\017\101\020\054\021\070\023" +
    "\066\024\075\043\064\054\060\060\061\061\100\062\103" +
    "\063\057\064\052\066\055\067\074\070\102\001\002\000" +
    "\034\007\uffee\024\uffee\027\uffee\030\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\057" +
    "\uffee\001\002\000\006\015\050\026\051\001\002\000\034" +
    "\007\uffed\024\uffed\027\uffed\030\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\057\uffed" +
    "\001\002\000\036\017\101\020\054\021\070\023\066\024" +
    "\075\043\064\060\061\061\100\062\103\063\057\064\052" +
    "\066\055\067\074\070\102\001\002\000\040\017\101\020" +
    "\054\021\070\023\066\024\075\043\064\054\060\060\061" +
    "\061\100\062\103\063\057\064\052\066\055\067\074\070" +
    "\102\001\002\000\040\017\101\020\054\021\070\023\066" +
    "\024\075\043\064\054\060\060\061\061\100\062\103\063" +
    "\057\064\052\066\055\067\074\070\102\001\002\000\042" +
    "\007\uffd9\024\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\056\213\057\uffd9\065\uffd9\001\002\000\074\007\uffb9\016" +
    "\uffb9\024\uffb9\025\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\065\uffb9\001\002\000\004\064\202\001\002\000\064" +
    "\007\uffcc\024\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\141\043\142\046\172\047\167\050\171\051\166\052" +
    "\173\053\170\055\uffcc\056\uffcc\057\uffcc\065\uffcc\001\002" +
    "\000\004\064\163\001\002\000\040\017\101\020\054\021" +
    "\070\023\066\024\075\043\064\054\060\060\061\061\100" +
    "\062\103\063\057\064\052\066\055\067\074\070\102\001" +
    "\002\000\004\064\160\001\002\000\074\007\uffb1\016\uffb1" +
    "\024\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033" +
    "\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\065\uffb1\001\002\000\044\007\uffd8\024\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\055\156\056\uffd8\057\uffd8\065" +
    "\uffd8\001\002\000\036\017\101\020\054\021\070\023\066" +
    "\024\075\043\064\060\061\061\100\062\103\063\057\064" +
    "\052\066\055\067\074\070\102\001\002\000\074\007\uffb2" +
    "\016\uffb2\024\uffb2\025\uffb2\027\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\055\uffb2\056\uffb2" +
    "\057\uffb2\065\uffb2\001\002\000\074\007\uffb3\016\uffb3\024" +
    "\uffb3\025\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\055\uffb3\056\uffb3\057\uffb3\065" +
    "\uffb3\001\002\000\074\007\uffbc\016\uffbc\024\uffbc\025\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\055\uffbc\056\uffbc\057\uffbc\065\uffbc\001\002" +
    "\000\074\007\uffb6\016\uffb6\024\uffb6\025\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6" +
    "\055\uffb6\056\uffb6\057\uffb6\065\uffb6\001\002\000\074\007" +
    "\uffbf\016\uffbf\024\uffbf\025\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\044\144\045\145\046\uffbf" +
    "\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\056" +
    "\uffbf\057\uffbf\065\uffbf\001\002\000\034\007\ufff0\024\ufff0" +
    "\027\ufff0\030\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\057\ufff0\001\002\000\044" +
    "\007\uffd5\024\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\065\uffd5\001\002\000\004\064" +
    "\126\001\002\000\076\007\uffbb\015\123\016\uffbb\024\uffbb" +
    "\025\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\055\uffbb\056\uffbb\057\uffbb\065\uffbb" +
    "\001\002\000\074\007\uffb5\016\uffb5\024\uffb5\025\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5" +
    "\053\uffb5\055\uffb5\056\uffb5\057\uffb5\065\uffb5\001\002\000" +
    "\044\007\uffd3\024\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\055\uffd3\056\uffd3\057\uffd3\065\uffd3\001\002\000\004" +
    "\064\121\001\002\000\074\007\uffba\016\uffba\024\uffba\025" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba" +
    "\052\uffba\053\uffba\055\uffba\056\uffba\057\uffba\065\uffba\001" +
    "\002\000\004\064\106\001\002\000\004\064\104\001\002" +
    "\000\004\065\105\001\002\000\074\007\uffae\016\uffae\024" +
    "\uffae\025\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae" +
    "\051\uffae\052\uffae\053\uffae\055\uffae\056\uffae\057\uffae\065" +
    "\uffae\001\002\000\006\023\111\024\110\001\002\000\004" +
    "\065\120\001\002\000\004\025\115\001\002\000\004\025" +
    "\112\001\002\000\006\023\114\024\113\001\002\000\004" +
    "\065\uffa9\001\002\000\004\065\uffab\001\002\000\006\023" +
    "\117\024\116\001\002\000\004\065\uffa8\001\002\000\004" +
    "\065\uffaa\001\002\000\074\007\uffac\016\uffac\024\uffac\025" +
    "\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\055\uffac\056\uffac\057\uffac\065\uffac\001" +
    "\002\000\004\065\122\001\002\000\074\007\uffaf\016\uffaf" +
    "\024\uffaf\025\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\052\uffaf\053\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\065\uffaf\001\002\000\004\017\124\001\002\000\004\016" +
    "\125\001\002\000\074\007\uffb4\016\uffb4\024\uffb4\025\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\055\uffb4\056\uffb4\057\uffb4\065\uffb4\001\002" +
    "\000\016\046\133\047\131\050\134\051\130\052\135\053" +
    "\132\001\002\000\004\025\136\001\002\000\004\025\uffc4" +
    "\001\002\000\004\025\uffc6\001\002\000\004\025\uffc2\001" +
    "\002\000\004\025\uffc7\001\002\000\004\025\uffc5\001\002" +
    "\000\004\025\uffc3\001\002\000\036\017\101\020\054\021" +
    "\070\023\066\024\075\043\064\060\061\061\100\062\103" +
    "\063\057\064\052\066\055\067\074\070\102\001\002\000" +
    "\010\025\140\042\141\043\142\001\002\000\006\023\152" +
    "\024\151\001\002\000\036\017\101\020\054\021\070\023" +
    "\066\024\075\043\064\060\061\061\100\062\103\063\057" +
    "\064\052\066\055\067\074\070\102\001\002\000\036\017" +
    "\101\020\054\021\070\023\066\024\075\043\064\060\061" +
    "\061\100\062\103\063\057\064\052\066\055\067\074\070" +
    "\102\001\002\000\074\007\uffc0\016\uffc0\024\uffc0\025\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\144\045\145\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\055\uffc0\056\uffc0\057\uffc0\065\uffc0\001\002" +
    "\000\036\017\101\020\054\021\070\023\066\024\075\043" +
    "\064\060\061\061\100\062\103\063\057\064\052\066\055" +
    "\067\074\070\102\001\002\000\036\017\101\020\054\021" +
    "\070\023\066\024\075\043\064\060\061\061\100\062\103" +
    "\063\057\064\052\066\055\067\074\070\102\001\002\000" +
    "\074\007\uffbd\016\uffbd\024\uffbd\025\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\065\uffbd\001\002\000\074\007\uffbe" +
    "\016\uffbe\024\uffbe\025\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\065\uffbe\001\002\000\074\007\uffc1\016\uffc1\024" +
    "\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\144\045\145\046\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1\057\uffc1\065" +
    "\uffc1\001\002\000\004\065\154\001\002\000\004\065\153" +
    "\001\002\000\074\007\uffc9\016\uffc9\024\uffc9\025\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\055\uffc9\056\uffc9\057\uffc9\065\uffc9\001\002\000" +
    "\074\007\uffc8\016\uffc8\024\uffc8\025\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\065\uffc8\001\002\000\074\007\uffb7" +
    "\016\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\055\uffb7\056\uffb7" +
    "\057\uffb7\065\uffb7\001\002\000\040\017\101\020\054\021" +
    "\070\023\066\024\075\043\064\054\060\060\061\061\100" +
    "\062\103\063\057\064\052\066\055\067\074\070\102\001" +
    "\002\000\044\007\uffd6\024\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\055\uffd6\056\uffd6\057\uffd6\065\uffd6\001\002" +
    "\000\004\065\161\001\002\000\074\007\uffb0\016\uffb0\024" +
    "\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\055\uffb0\056\uffb0\057\uffb0\065" +
    "\uffb0\001\002\000\044\007\uffd4\024\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\055\uffd4\056\uffd4\057\uffd4\065\uffd4" +
    "\001\002\000\004\017\164\001\002\000\004\065\165\001" +
    "\002\000\074\007\uffad\016\uffad\024\uffad\025\uffad\027\uffad" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\055\uffad\056\uffad\057\uffad\065\uffad\001\002\000\036" +
    "\017\101\020\054\021\070\023\066\024\075\043\064\060" +
    "\061\061\100\062\103\063\057\064\052\066\055\067\074" +
    "\070\102\001\002\000\036\017\101\020\054\021\070\023" +
    "\066\024\075\043\064\060\061\061\100\062\103\063\057" +
    "\064\052\066\055\067\074\070\102\001\002\000\036\017" +
    "\101\020\054\021\070\023\066\024\075\043\064\060\061" +
    "\061\100\062\103\063\057\064\052\066\055\067\074\070" +
    "\102\001\002\000\036\017\101\020\054\021\070\023\066" +
    "\024\075\043\064\060\061\061\100\062\103\063\057\064" +
    "\052\066\055\067\074\070\102\001\002\000\036\017\101" +
    "\020\054\021\070\023\066\024\075\043\064\060\061\061" +
    "\100\062\103\063\057\064\052\066\055\067\074\070\102" +
    "\001\002\000\036\017\101\020\054\021\070\023\066\024" +
    "\075\043\064\060\061\061\100\062\103\063\057\064\052" +
    "\066\055\067\074\070\102\001\002\000\050\007\uffce\024" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\141\043" +
    "\142\055\uffce\056\uffce\057\uffce\065\uffce\001\002\000\050" +
    "\007\uffd2\024\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\042\141\043\142\055\uffd2\056\uffd2\057\uffd2\065\uffd2\001" +
    "\002\000\050\007\uffd0\024\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\141\043\142\055\uffd0\056\uffd0\057\uffd0" +
    "\065\uffd0\001\002\000\050\007\uffcd\024\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\141\043\142\055\uffcd\056" +
    "\uffcd\057\uffcd\065\uffcd\001\002\000\050\007\uffd1\024\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\141\043\142" +
    "\055\uffd1\056\uffd1\057\uffd1\065\uffd1\001\002\000\050\007" +
    "\uffcf\024\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\141\043\142\055\uffcf\056\uffcf\057\uffcf\065\uffcf\001\002" +
    "\000\016\046\133\047\131\050\134\051\130\052\135\053" +
    "\132\001\002\000\004\025\204\001\002\000\036\017\101" +
    "\020\054\021\070\023\066\024\075\043\064\060\061\061" +
    "\100\062\103\063\057\064\052\066\055\067\074\070\102" +
    "\001\002\000\010\025\206\042\141\043\142\001\002\000" +
    "\006\023\210\024\207\001\002\000\004\065\212\001\002" +
    "\000\004\065\211\001\002\000\074\007\uffcb\016\uffcb\024" +
    "\uffcb\025\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb\057\uffcb\065" +
    "\uffcb\001\002\000\074\007\uffca\016\uffca\024\uffca\025\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\053\uffca\055\uffca\056\uffca\057\uffca\065\uffca\001\002" +
    "\000\040\017\101\020\054\021\070\023\066\024\075\043" +
    "\064\054\060\060\061\061\100\062\103\063\057\064\052" +
    "\066\055\067\074\070\102\001\002\000\044\007\uffd7\024" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\055\156\056" +
    "\uffd7\057\uffd7\065\uffd7\001\002\000\004\065\216\001\002" +
    "\000\074\007\uffb8\016\uffb8\024\uffb8\025\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\065\uffb8\001\002\000\010\016" +
    "\220\042\141\043\142\001\002\000\004\026\221\001\002" +
    "\000\036\017\101\020\054\021\070\023\066\024\075\043" +
    "\064\060\061\061\100\062\103\063\057\064\052\066\055" +
    "\067\074\070\102\001\002\000\040\007\uffef\024\uffef\027" +
    "\uffef\030\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\042\141\043\142\057\uffef\001" +
    "\002\000\004\031\224\001\002\000\016\024\046\027\044" +
    "\030\043\035\034\036\033\057\035\001\002\000\024\024" +
    "\046\027\044\030\043\032\227\033\230\034\231\035\034" +
    "\036\033\057\035\001\002\000\026\007\ufff6\024\ufff6\027" +
    "\ufff6\030\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\057\ufff6\001\002\000\016\024\046\027\044\030\043\035" +
    "\034\036\033\057\035\001\002\000\016\024\046\027\044" +
    "\030\043\035\034\036\033\057\035\001\002\000\034\007" +
    "\uffec\024\uffec\027\uffec\030\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\057\uffec\001" +
    "\002\000\020\024\046\027\044\030\043\034\233\035\034" +
    "\036\033\057\035\001\002\000\034\007\uffea\024\uffea\027" +
    "\uffea\030\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\057\uffea\001\002\000\020\024" +
    "\046\027\044\030\043\034\235\035\034\036\033\057\035" +
    "\001\002\000\034\007\uffeb\024\uffeb\027\uffeb\030\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\057\uffeb\001\002\000\004\031\237\001\002\000" +
    "\016\024\046\027\044\030\043\035\034\036\033\057\035" +
    "\001\002\000\024\024\046\027\044\030\043\032\241\033" +
    "\242\034\243\035\034\036\033\057\035\001\002\000\016" +
    "\024\046\027\044\030\043\035\034\036\033\057\035\001" +
    "\002\000\016\024\046\027\044\030\043\035\034\036\033" +
    "\057\035\001\002\000\034\007\uffe9\024\uffe9\027\uffe9\030" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\057\uffe9\001\002\000\020\024\046\027" +
    "\044\030\043\034\245\035\034\036\033\057\035\001\002" +
    "\000\034\007\uffe7\024\uffe7\027\uffe7\030\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\057\uffe7\001\002\000\020\024\046\027\044\030\043\034" +
    "\247\035\034\036\033\057\035\001\002\000\034\007\uffe8" +
    "\024\uffe8\027\uffe8\030\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\057\uffe8\001\002" +
    "\000\004\002\000\001\002\000\042\017\101\020\054\021" +
    "\070\022\252\023\066\024\075\043\064\054\060\060\061" +
    "\061\100\062\103\063\057\064\052\066\055\067\074\070" +
    "\102\001\002\000\004\065\uffda\001\002\000\004\065\255" +
    "\001\002\000\004\065\uffdb\001\002\000\034\007\uffdc\024" +
    "\uffdc\027\uffdc\030\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\057\uffdc\001\002\000" +
    "\004\031\257\001\002\000\022\024\046\027\044\030\043" +
    "\035\034\036\033\040\267\041\266\057\035\001\002\000" +
    "\024\024\uffe0\027\uffe0\030\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\057\uffe0\001\002\000\024\024\uffe1\027" +
    "\uffe1\030\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\057\uffe1\001\002\000\024\024\046\027\044\030\043\035" +
    "\034\036\033\037\271\040\267\041\266\057\035\001\002" +
    "\000\024\024\uffdf\027\uffdf\030\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\057\uffdf\001\002\000\024\024\uffe2" +
    "\027\uffe2\030\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\057\uffe2\001\002\000\024\024\uffe3\027\uffe3\030\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\057\uffe3\001" +
    "\002\000\024\024\uffdd\027\uffdd\030\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\057\uffdd\001\002\000\024\024" +
    "\uffde\027\uffde\030\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\057\uffde\001\002\000\024\024\uffe4\027\uffe4\030" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\057\uffe4" +
    "\001\002\000\034\007\uffe6\024\uffe6\027\uffe6\030\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\057\uffe6\001\002\000\004\031\273\001\002\000" +
    "\022\024\046\027\044\030\043\035\034\036\033\040\267" +
    "\041\266\057\035\001\002\000\024\024\046\027\044\030" +
    "\043\035\034\036\033\037\275\040\267\041\266\057\035" +
    "\001\002\000\034\007\uffe5\024\uffe5\027\uffe5\030\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\057\uffe5\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\004\003\003\001\001\000\002\001\001\000" +
    "\010\002\011\013\005\033\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\011\013\024\033\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\036\005\041\006" +
    "\031\007\044\011\035\014\046\015\040\030\037\001\001" +
    "\000\002\001\001\000\030\016\055\017\070\020\066\021" +
    "\271\022\052\023\062\024\076\025\072\026\061\027\075" +
    "\036\064\001\001\000\030\016\055\017\070\020\066\021" +
    "\255\022\052\023\062\024\076\025\072\026\061\027\075" +
    "\036\064\001\001\000\002\001\001\000\020\004\225\005" +
    "\041\006\031\007\044\014\046\015\040\030\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\016\055\017\070\020\066\021\235" +
    "\022\052\023\062\024\076\025\072\026\061\027\075\036" +
    "\064\001\001\000\030\016\055\017\070\020\066\021\222" +
    "\022\052\023\062\024\076\025\072\026\061\027\075\036" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\016\216\017\070\020\066\026\061\027" +
    "\075\036\064\001\001\000\030\016\055\017\070\020\066" +
    "\021\071\022\052\023\062\024\076\025\072\026\061\027" +
    "\075\036\064\001\001\000\030\016\055\017\070\020\066" +
    "\021\214\022\052\023\062\024\076\025\072\026\061\027" +
    "\075\036\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\016\055\017\070\020\066\024\076\025\161\026\061" +
    "\027\075\036\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\154\026\061\027\075" +
    "\036\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\136\017\070\020\066\026\061" +
    "\027\075\036\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\147\020\066\026\061\027\075\036\064" +
    "\001\001\000\014\017\142\020\066\026\061\027\075\036" +
    "\064\001\001\000\002\001\001\000\012\020\146\026\061" +
    "\027\075\036\064\001\001\000\012\020\145\026\061\027" +
    "\075\036\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\055\017\070\020\066\024\076\025\156\026\061\027" +
    "\075\036\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\016\200\017\070" +
    "\020\066\026\061\027\075\036\064\001\001\000\016\016" +
    "\177\017\070\020\066\026\061\027\075\036\064\001\001" +
    "\000\016\016\176\017\070\020\066\026\061\027\075\036" +
    "\064\001\001\000\016\016\175\017\070\020\066\026\061" +
    "\027\075\036\064\001\001\000\016\016\174\017\070\020" +
    "\066\026\061\027\075\036\064\001\001\000\016\016\173" +
    "\017\070\020\066\026\061\027\075\036\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\202\001\001\000\002\001\001\000\016\016\204\017\070" +
    "\020\066\026\061\027\075\036\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\016\055\017" +
    "\070\020\066\023\213\024\076\025\072\026\061\027\075" +
    "\036\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\221\017\070\020\066\026\061\027\075\036\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\036" +
    "\005\041\006\031\007\044\011\224\014\046\015\040\030" +
    "\037\001\001\000\020\004\225\005\041\006\031\007\044" +
    "\014\046\015\040\030\037\001\001\000\002\001\001\000" +
    "\022\004\036\005\041\006\031\007\044\011\233\014\046" +
    "\015\040\030\037\001\001\000\022\004\036\005\041\006" +
    "\031\007\044\011\231\014\046\015\040\030\037\001\001" +
    "\000\002\001\001\000\020\004\225\005\041\006\031\007" +
    "\044\014\046\015\040\030\037\001\001\000\002\001\001" +
    "\000\020\004\225\005\041\006\031\007\044\014\046\015" +
    "\040\030\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\036\005\041\006\031\007\044\011\237\014" +
    "\046\015\040\030\037\001\001\000\020\004\225\005\041" +
    "\006\031\007\044\014\046\015\040\030\037\001\001\000" +
    "\022\004\036\005\041\006\031\007\044\011\245\014\046" +
    "\015\040\030\037\001\001\000\022\004\036\005\041\006" +
    "\031\007\044\011\243\014\046\015\040\030\037\001\001" +
    "\000\002\001\001\000\020\004\225\005\041\006\031\007" +
    "\044\014\046\015\040\030\037\001\001\000\002\001\001" +
    "\000\020\004\225\005\041\006\031\007\044\014\046\015" +
    "\040\030\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\016\055\017\070\020\066\021\253\022\052\023" +
    "\062\024\076\025\072\026\061\027\075\032\252\036\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\263" +
    "\006\257\007\044\010\264\012\261\014\046\015\262\030" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\263\006\257\007\044\010\267\014\046\015\262\030" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\263" +
    "\006\257\007\044\010\264\012\273\014\046\015\262\030" +
    "\260\001\001\000\020\005\263\006\257\007\044\010\267" +
    "\014\046\015\262\030\260\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    SymbolTable tablaSimbolos = new SymbolTable();
    int strCounter = 0; // Para generar identificadores únicos para strings
    ArrayList<String> nombres = new ArrayList<>();
    List<Nodo> instruccionesPP = new ArrayList<>();
    List<Nodo> declaracionesPP = new ArrayList<>();
    List<Nodo> instruccionesAll = new ArrayList<>();
    List<Nodo> declaracionesAll = new ArrayList<>();
    List<Nodo> declaracionesAny = new ArrayList<>();
    List<Nodo> instruccionesAny = new ArrayList<>();
    ContextoSTR contextoStr = new ContextoSTR(0); //Para generar identificadores únicos para PP, ALL y ANY
    

    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {


   

  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= DECLARE_SECTION declaraciones ENDDECLARE_SECTION PROGRAM_SECTION instrucciones ENDPROGRAM_SECTION 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		List<Nodo> d = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Nodo> i = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
                System.out.println("REGLA 1: programa -> DECLARE_SECTION declaraciones ENDDECLARE_SECTION  PROGRAM_SECTION instrucciones ENDPROGRAM_SECTION");
                if(!declaracionesPP.isEmpty()){d.addAll(declaracionesPP);declaracionesPP.clear();}
                if(!declaracionesAll.isEmpty()){d.addAll(declaracionesAll);declaracionesAll.clear();}
                if(!declaracionesAny.isEmpty()){d.addAll(declaracionesAny);declaracionesAny.clear();}
                Programa prog= new Programa(d, i); 
                RESULT = prog; 
                tablaSimbolos.mostrarTablaEnGUI();
               
             
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= declaracion declaraciones 
            {
              List<Nodo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		List<Nodo> ds = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		  System.out.println("REGLA 2: declaraciones -> declaracion declaraciones"); 
                 List<Nodo> lista = new ArrayList<>();
                   lista.add(d);
                   lista.addAll(ds);
                  RESULT = lista; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= 
            {
              List<Nodo> RESULT =null;
		 System.out.println("REGLA 2: declaraciones -> declaracion"); RESULT = new ArrayList<>();  
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion ::= tipo_dato DECLARACION lista_identificadores 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		 System.out.println("REGLA 3.1: declaracion -> tipo");  
                for (String nombre : nombres) {
                    if (tablaSimbolos.exists(nombre)) {
                      throw new Error("Error: Variable '" + nombre + "' ya declarada.");
                 } else {
                     tablaSimbolos.add(nombre, t);
                 }
                }
                List<Nodo> nodos = new ArrayList<>();
                for (String nombre : nombres) {
                    nodos.add(new DeclaracionVariable(t, nombre));
                }
              
                nombres.clear();
                RESULT = new DeclaracionMultiple(nodos); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= TYPE_FLOAT_ARRAY CORCHETE_ABIERTO LIT_INTEGER CORCHETE_CERRADO DECLARACION lista_identificadores 
            {
              Nodo RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		 System.out.println("REGLA 3.2: declaracion -> tipo"); 
                for (String nombre : nombres) {
                    if (tablaSimbolos.exists(nombre)) {
                      throw new Error("Error: Variable '" + nombre + "' ya declarada.");
                 } else {
                     tablaSimbolos.add(nombre, "float_array"+"["+size+"]");
                 }
                }
                List<Nodo> nodos = new ArrayList<>();
                for (String nombre : nombres) {
                    nodos.add(new DeclaracionArray("float_array", nombre, Integer.parseInt(size.toString())));
                }
                nombres.clear(); 
                RESULT = new DeclaracionMultiple(nodos);
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipo_dato ::= TYPE_INTEGER 
            {
              String RESULT =null;
		 RESULT = "integer"; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo_dato",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo_dato ::= TYPE_BOOLEAN 
            {
              String RESULT =null;
		 RESULT = "bool"; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo_dato",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo_dato ::= TYPE_FLOAT 
            {
              String RESULT =null;
		 RESULT = "float"; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo_dato",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_identificadores ::= IDENTIFICADOR COMA lista_identificadores 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Nodo resto = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.printf("REGLA 4: lista_identificadores: identificador ->%s%n", id); 
                        nombres.add(""+id); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_identificadores",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_identificadores ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.printf("REGLA 4: lista_identificadores: identificador ->%s%n", id); 
                        nombres.add(""+id);
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_identificadores",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= instrucciones instruccion 
            {
              List<Nodo> RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Nodo> is = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 5: instrucciones -> instruccion instrucciones"); 
                 if(!instruccionesPP.isEmpty()){is.addAll(instruccionesPP);instruccionesPP.clear();} 
                 if(!instruccionesAll.isEmpty()){is.addAll(instruccionesAll);instruccionesAll.clear();} 
                 if(!instruccionesAny.isEmpty()){is.addAll(instruccionesAny);instruccionesAny.clear();} 
                  is.add(i);                              
                  RESULT = is; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instrucciones",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrucciones ::= instruccion 
            {
              List<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 
                    List<Nodo> lista = new ArrayList<>();
                    if(!instruccionesPP.isEmpty()){lista.addAll(instruccionesPP);instruccionesPP.clear();}
                    if(!instruccionesAll.isEmpty()){lista.addAll(instruccionesAll);instruccionesAll.clear();}
                    if(!instruccionesAny.isEmpty()){lista.addAll(instruccionesAny);instruccionesAny.clear();} 
                    lista.add(i);                   
                    RESULT = lista; 
                
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instrucciones",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= asignacion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 6.1: instruccion -> asignacion"); RESULT = a; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= condicional 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 6.2: instruccion -> condicional"); RESULT = c; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= bucle 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 6.3: instruccion -> bucle "); RESULT = b; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= instruccion_salida 
            {
              Nodo RESULT =null;
		int ioleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Nodo io = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 6.4: instruccion -> entrada_salida"); RESULT = io; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // asignacion ::= IDENTIFICADOR ASIGNACION expresion_logica 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 7: asignacion -> IDENTIFICADOR ASIGNACION expresion"); 
                String tipoVar = tablaSimbolos.getTipo(id.toString());
                ValidarTipos.verificarDeclaracion(id.toString(), tablaSimbolos);
                String tipoExpr = e.getTipo();
                ValidarTipos.verificarDeclaracion(id.toString(), tablaSimbolos); 
                //Caso verificacion longitud entre arrays 
                if (tablaSimbolos.getTipo(id.toString()).startsWith("float_array")){
                    if (!(e instanceof Identificador)){
                        ValidarTipos.validarAsignacionEntreArrays(id, e, tablaSimbolos);
                    }else if(e instanceof Identificador){
                        ValidarTipos.validarAsignacionEntreArraysNoLiterales(id, e, tablaSimbolos);}
                    RESULT = new Asignacion(new Identificador(id.toString()), e);
                }else{
                    String validar=ValidarTipos.validarAsignacion(tipoVar, tipoExpr, id.toString());
                    Nodo eFinal = e;
                    if (validar.equals("Conversion")) {
                        eFinal = new NodoConversion(e); 
                    }                    
                    RESULT = new Asignacion(new Identificador(id.toString()), (Expresion) eFinal); 
                 }
                 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asignacion ::= IDENTIFICADOR CORCHETE_ABIERTO expresion CORCHETE_CERRADO ASIGNACION expresion 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("REGLA 7.1: asignacion -> IDENTIFICADOR CORCHETE_ABIERTO expresion CORCHETE_CERRADO ASIGNACION expresion"); 
                String tipoVar = tablaSimbolos.getTipo(id.toString());
                String tipoIndice= e.getTipo();
                String tipoExpr = e1.getTipo();
                ValidarTipos.verificarDeclaracion(id.toString(), tablaSimbolos);
                ValidarTipos.validarAsignacionArray(tipoVar, tipoExpr, id.toString(), e, tipoIndice);
                RESULT = new AsignacionArray(new Identificador(id.toString()), e, e1); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condicional ::= condicional_simple 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 11.1: condicional_simple"); RESULT = s; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicional",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condicional ::= condicional_backward 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 11.2: condicional_backward"); RESULT = b; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicional",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condicional_simple ::= CONDITION expresion_logica THEN instrucciones END 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Nodo> i = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
                    System.out.println("REGLA 12.1: condicional_simple-> CONDITION (exoresion) THEN instrucciones END");
                    ValidarTipos.verificarCondicion(exp);
                    RESULT = new ConditionThenElse(exp, i, null); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicional_simple",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condicional_simple ::= CONDITION expresion_logica THEN instrucciones ELSE instrucciones END 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		List<Nodo> i = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Nodo> e = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
                    System.out.println("REGLA 12.2: condicional_simple-> CONDITION (expresion_logica) THEN instrucciones ELSE instrucciones END"); 
                    ValidarTipos.verificarCondicion(exp);
                    RESULT = new ConditionThenElse(exp, i, e);  
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicional_simple",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condicional_simple ::= CONDITION expresion_logica THEN instrucciones ELSE_BACKWARD instrucciones END 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		List<Nodo> i = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Nodo> e = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
                    System.out.println("REGLA 12.3: condicional_simple-> CONDITION (expresion_logica) THEN instrucciones ELSE_BACKWARD instrucciones END");
                    ValidarTipos.verificarCondicion(exp);
                    Collections.reverse(e);
                    RESULT = new ConditionThenElse(exp, i, e); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicional_simple",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condicional_backward ::= BACKWARD_CONDITION expresion_logica THEN instrucciones END 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Nodo> i = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
                    System.out.println("REGLA 13.1: condicional_backward-> BACKWARD_CONDITION(expresion_logica) THEN instrucciones END"); 
                    ValidarTipos.verificarCondicion(exp);
                    Collections.reverse(i);
                    RESULT = new ConditionThenElse(exp, i, null); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicional_backward",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condicional_backward ::= BACKWARD_CONDITION expresion_logica THEN instrucciones ELSE instrucciones END 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		List<Nodo> i = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Nodo> e = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
                    System.out.println("REGLA 13.2: condicional_backward_con_else-> BACKWARD_CONDITION(expresion_logica) THEN instrucciones ELSE instrucciones END"); 
                    ValidarTipos.verificarCondicion(exp);
                    Collections.reverse(i);
                    RESULT = new ConditionThenElse(exp, i, e);  
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicional_backward",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicional_backward ::= BACKWARD_CONDITION expresion_logica THEN instrucciones ELSE_BACKWARD instrucciones END 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		List<Nodo> i = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Nodo> e = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
                    System.out.println("REGLA 13.3: condicional_backward_con_else_backward-> BACKWARD_CONDITION(expresion_logica) THEN instrucciones ELSE_BACKWARD instrucciones END");
                    ValidarTipos.verificarCondicion(exp);
                    Collections.reverse(i);
                    Collections.reverse(e);
                    RESULT = new ConditionThenElse(exp, i, e); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicional_backward",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bucle ::= LOOP_WHEN expresion_logica THEN instrucciones_bucle END_LOOP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        System.out.println("REGLA 14.1: bucle-> LOOP_WHEN (expresion_logica)THEN instrucciones_bucle END_LOOP");   
        RESULT = new Bucle(exp, b); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bucle",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bucle ::= BACKWARD_LOOP_WHEN expresion_logica THEN instrucciones_bucle END_LOOP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        System.out.println("REGLA 14.2: bucle-> BACKWARD_LOOP_WHEN (expresion_logica)THEN instrucciones_buble END_LOOP  "); 
        Collections.reverse(b);
        RESULT = new Bucle(exp, b); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bucle",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instrucciones_bucle ::= instrucciones_bucle instruccion_bucle 
            {
              List<Nodo> RESULT =null;
		int ibleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Nodo> ib = (List<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 15.1: intrucciones_bucle-> instruccion_bucle instrucciones_bucle");                  
                  if(!instruccionesPP.isEmpty()){ib.addAll(instruccionesPP); instruccionesPP.clear();}
                  if(!instruccionesAll.isEmpty()){ib.addAll(instruccionesAll);instruccionesAll.clear();} 
                  if(!instruccionesAny.isEmpty()){ib.addAll(instruccionesAny);instruccionesAny.clear();} 
                  ib.add(i);
                  RESULT = ib; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instrucciones_bucle",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instrucciones_bucle ::= instruccion_bucle 
            {
              List<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 15.2: intrucciones_bucle-> intruccion_bucle"); 
                    List<Nodo> lista = new ArrayList<>();
                    if(!instruccionesPP.isEmpty()){lista.addAll(instruccionesPP); instruccionesPP.clear();}
                    if(!instruccionesAll.isEmpty()){lista.addAll(instruccionesAll);instruccionesAll.clear();} 
                    if(!instruccionesAny.isEmpty()){lista.addAll(instruccionesAny);instruccionesAny.clear();} 
                    lista.add(i);
                    RESULT = lista; 
                
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instrucciones_bucle",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion_bucle ::= asignacion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 16.1: instruccion_bucle -> asignacion"); RESULT = a; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instruccion_bucle",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion_bucle ::= instruccion_salida 
            {
              Nodo RESULT =null;
		int ioleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Nodo io = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 16.2: instruccion_bucle -> entrada_salida"); RESULT = io; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instruccion_bucle",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion_bucle ::= condicional 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 16.3: instruccion_bucle -> condition"); RESULT = c;  
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instruccion_bucle",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion_bucle ::= bucle 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 16.4: instruccion_bucle -> bucle"); RESULT = b; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instruccion_bucle",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion_bucle ::= BREAK 
            {
              Nodo RESULT =null;
		System.out.println("REGLA 16.5: instruccion_bucle -> break"); RESULT = new Break(); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instruccion_bucle",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion_bucle ::= CONTINUE 
            {
              Nodo RESULT =null;
		System.out.println("REGLA 16.6: instruccion_bucle -> continue"); RESULT = new Continue();  
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instruccion_bucle",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion_salida ::= DISPLAY PAREN_ABIERTO expresion_display PAREN_CERRADO 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		System.out.println("REGLA 18: instruccion_salida-> (expresion_display)"); RESULT = new Display(exp); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instruccion_salida",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_display ::= expresion_logica 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion l = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 19.2: expresion_display-> expresion"); RESULT = l; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_display",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_display ::= LIT_STRING 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 19.3: expresion_display-> LIT_STRING"); 
                    /*tabla de simbolos*/
                     String id = "__str" + (++strCounter);
                    if (!tablaSimbolos.exists(id)) {
                    tablaSimbolos.add(id, ""+s);
                    } RESULT = new Constante(s); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_display",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_logica ::= expresion_or 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 20: expresion_logica-> expresion_or"); RESULT = s; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_logica",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion_or ::= expresion_and 
            {
              Expresion RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion ep = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 21:expresion_and-> expresion_and"); RESULT = ep; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_or",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion_or ::= expresion_or OP_OR expresion_and 
            {
              Expresion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 21:expresion_or-> expresion_and"); RESULT = new OperacionOr(izq, der); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_or",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion_and ::= expresion_and OP_AND expresion_not 
            {
              Expresion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 21.1: expresion_and-> expresion_and AND expresion_not"); RESULT = new OperacionAnd(izq, der); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_and",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_and ::= expresion_not 
            {
              Expresion RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 21.2: expresion_and-> expresion_not"); RESULT = en; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_and",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_not ::= OP_NOT expresion_not 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 23.1: expresion_not-> NOT expresion_not"); 
                    OperacionNot operacionNot= new OperacionNot(e);
                    ValidarTipos.verificarOperacionNot(operacionNot);
                    RESULT = operacionNot; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_not",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion_not ::= expresion_comparacion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 23.2: expresion_not-> expresion_comparacion"); RESULT = e; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_not",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_comparacion ::= expresion OP_IGUAL expresion 
            {
              Expresion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 22.1:expresion_comparacion-> expresion == expresion"); 
                        String validar=ValidarTipos.verificarOperacionBinariaLogica(izq, der);
                        Igual eq =null;
                        if (validar.equals("Conversion")){ 
                                eq= new Igual(izq, new NodoConversion(der));
                        }else if (validar.equals("Conversion")){
                                eq= new Igual(new NodoConversion(izq),der); 
                        }else { eq= new Igual(izq, der);}
                        RESULT = eq; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_comparacion ::= expresion OP_NEQ expresion 
            {
              Expresion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 22.2:expresion_comparacion-> expresion != expresion");
                        String validar=ValidarTipos.verificarOperacionBinariaLogica(izq, der);
                        Distinto dist =null;
                        if (validar.equals("Conversion")){ 
                                dist= new Distinto(izq, new NodoConversion(der));
                        }else if (validar.equals("Conversion01")){
                                dist= new Distinto(new NodoConversion(izq),der); 
                        }else { dist= new Distinto(izq, der);}
                        RESULT =  dist; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion_comparacion ::= expresion OP_MA expresion 
            {
              Expresion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 22.3:expresion_comparacion->  expresion > expresion"); 
                        String validar=ValidarTipos.verificarOperacionBinariaLogica(izq, der);
                        Mayor mayor =null;
                        if (validar.equals("Conversion")){ 
                                mayor= new Mayor(izq, new NodoConversion(der));
                        }else if (validar.equals("Conversion")){
                                mayor= new Mayor(new NodoConversion(izq),der); 
                        }else { mayor= new Mayor(izq, der);}
                        RESULT = mayor; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion_comparacion ::= expresion OP_ME expresion 
            {
              Expresion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 22.4:expresion_comparacion-> expresion < expresion");
                        String validar=ValidarTipos.verificarOperacionBinariaLogica(izq, der);
                        Menor menor =null;
                        if (validar.equals("Conversion")){ 
                                menor= new Menor(izq, new NodoConversion(der));
                        }else if (validar.equals("Conversion")){
                                menor= new Menor(new NodoConversion(izq),der); 
                        }else { menor= new Menor(izq, der);}
                        RESULT = menor;  
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion_comparacion ::= expresion OP_MAI expresion 
            {
              Expresion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 22.5:expresion_comparacion-> expresion >= expresion");
                        String validar=ValidarTipos.verificarOperacionBinariaLogica(izq, der);
                        MayorIgual mayor =null;
                        if (validar.equals("Conversion")){ 
                                mayor= new MayorIgual(izq, new NodoConversion(der));
                        }else if (validar.equals("Conversion")){
                                mayor= new MayorIgual(new NodoConversion(izq),der); 
                        }else { mayor= new MayorIgual(izq, der);}
                        RESULT = mayor; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_comparacion ::= expresion OP_MEI expresion 
            {
              Expresion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion izq = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 22.6:expresion_comparacion-> expresion <= expresion");
                        String validar=ValidarTipos.verificarOperacionBinariaLogica(izq, der);
                        MenorIgual menor =null;
                        if (validar.equals("Conversion")){ 
                                menor= new MenorIgual(izq, new NodoConversion(der));
                        }else if (validar.equals("Conversion")){
                                menor= new MenorIgual(new NodoConversion(izq),der);
                        }else { menor= new MenorIgual(izq, der);}
                        RESULT = menor; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion_comparacion ::= expresion 
            {
              Expresion RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion ep = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("REGLA 22.7:expresion_comparacion-> expresion");RESULT = ep; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funcion_logica ::= ALL PAREN_ABIERTO operador COMA expresion COMA LIT_ARRAY PAREN_CERRADO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        Identificador resultado= All.crearAllLiteralComoAST(contextoStr.getStrYIncrementar(), op, expr, new Constante(arr), declaracionesAll, instruccionesAll, tablaSimbolos); 
        RESULT = resultado; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcion_logica",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funcion_logica ::= ALL PAREN_ABIERTO operador COMA expresion COMA IDENTIFICADOR PAREN_CERRADO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int arridleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int arridright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object arrid = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        ValidarTipos.verificarDeclaracion(arrid.toString(), tablaSimbolos); 
        Identificador resultado= All.crearAllComoAST(contextoStr.getStrYIncrementar(), op, expr, arrid.toString(), declaracionesAll, instruccionesAll, tablaSimbolos);     
        RESULT = resultado; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcion_logica",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // funcion_logica ::= ANY PAREN_ABIERTO operador COMA expresion COMA LIT_ARRAY PAREN_CERRADO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
        Identificador resultado= Any.crearAnyLiteralComoAST(contextoStr.getStrYIncrementar(), op, expr, new Constante(arr), declaracionesAny, instruccionesAny, tablaSimbolos); 
        RESULT = resultado; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcion_logica",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funcion_logica ::= ANY PAREN_ABIERTO operador COMA expresion COMA IDENTIFICADOR PAREN_CERRADO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int arridleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int arridright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object arrid = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        ValidarTipos.verificarDeclaracion(arrid.toString(), tablaSimbolos);
        Identificador resultado= Any.crearAnyComoAST(contextoStr.getStrYIncrementar(), op, expr, arrid.toString(), declaracionesAny, instruccionesAny, tablaSimbolos);        
        RESULT = resultado; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcion_logica",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operador ::= OP_IGUAL 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("operador",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operador ::= OP_NEQ 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("operador",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operador ::= OP_MA 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("operador",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador ::= OP_ME 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("operador",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador ::= OP_MAI 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("operador",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador ::= OP_MEI 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("operador",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresion OP_SUM termino 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 8.1: expresion-> expresion + termino"); 
                        String validar=ValidarTipos.verificarOperacionBinaria(e1, e2);
                        OperacionSuma suma =null;
                        if (validar.equals("Conversion")){ 
                                suma= new OperacionSuma(e1, new NodoConversion(e2));}
                        if (validar.equals("Conversion")){
                                suma= new OperacionSuma(new NodoConversion(e1), e2); 
                        }else { suma= new OperacionSuma(e1, e2);}
                        RESULT = suma; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion OP_SUB termino 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 8.2: expresion-> expresion - termino"); 
                        String validar=ValidarTipos.verificarOperacionBinaria(e1, e2);
                        OperacionResta resta =null;
                        if (validar.equals("Conversion")){ 
                               resta= new OperacionResta(e1, new NodoConversion(e2));}
                        if (validar.equals("Conversion")){
                                resta= new OperacionResta(new NodoConversion(e1), e2); 
                        }else { resta= new OperacionResta(e1, e2);}
                        RESULT = resta; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= termino 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 8.3: expresion-> termino"); RESULT = t; 
                        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // termino ::= termino OP_MUL factor 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 9.1: termino-> termino * factor"); 
            String validar=ValidarTipos.verificarOperacionBinaria(t1, f);
            OperacionMultiplicacion mult =null;
                        if (validar.equals("Conversion")){ 
                                mult= new OperacionMultiplicacion(t1, new NodoConversion(f));}
                        if (validar.equals("Conversion")){
                                mult= new OperacionMultiplicacion(new NodoConversion(t1), f); 
                        }else { mult= new OperacionMultiplicacion(t1, f);}
            RESULT = mult; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // termino ::= termino OP_DIV factor 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 9.2: termino-> termino / factor"); 
            String validar=ValidarTipos.verificarOperacionBinaria(t1, f);
            OperacionDivision div =null;
                        if (validar.equals("Conversion")){ 
                                div= new OperacionDivision(t1, new NodoConversion(f));}
                        if (validar.equals("Conversion")){
                                div= new OperacionDivision(new NodoConversion(t1), f); 
                        }else { div= new OperacionDivision(t1, f);}
            RESULT = div; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // termino ::= factor 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 9.3: termino-> factor"); RESULT = f; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 10.1: factor-> IDENTIFICADOR"); 
        ValidarTipos.verificarDeclaracion(id.toString(), tablaSimbolos);
        RESULT = new Identificador(id.toString()); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= LIT_INTEGER 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 10.2: factor-> LIT_INTIGER"); RESULT = new Constante(i); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= LIT_FLOAT 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 10.3: factor-> LIT_FLOAT"); RESULT = new Constante(f); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= PAREN_ABIERTO expresion_logica PAREN_CERRADO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		System.out.println("REGLA 10.4: factor-> (factor)"); RESULT = e; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= OP_SUB factor 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 10.4: factor-> -factor"); 
        Negativo negativo = new Negativo(f);
        ValidarTipos.verificarNegativo(negativo);  
        RESULT = negativo; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= LIT_BOOLEAN 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 10.5: factor-> LIT_BOOLEAN"); RESULT = new Constante(f);
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= funcion_logica 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 10.6: factor-> funcion_logica"); RESULT = f; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= IDENTIFICADOR CORCHETE_ABIERTO LIT_INTEGER CORCHETE_CERRADO 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		System.out.println("REGLA 10.8: factor-> IDENTIFICADOR[LIT_INTEGER]"); 
        ValidarTipos.verificarDeclaracion(id.toString(), tablaSimbolos);    
        RESULT = new AccesoArray(new Identificador(id.toString()), new Constante(f));  
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= LIT_ARRAY 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 10.8: factor-> LIT_ARRAY"); RESULT = new Constante(l); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= promedio_ponderado 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion p = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 10.9: instruccion-> promedio_ponderado"); RESULT = p; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= instruccion_entrada 
            {
              Expresion RESULT =null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion ie = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("REGLA 10.10: factor-> instruccion_entrada"); RESULT = ie;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // instruccion_entrada ::= INPUT_INT PAREN_ABIERTO PAREN_CERRADO 
            {
              Expresion RESULT =null;
		System.out.println("REGLA 11.1:instruccion_entrada-> INPUT_INT()"); RESULT = new InputInt();
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instruccion_entrada",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // instruccion_entrada ::= INPUT_FLOAT PAREN_ABIERTO PAREN_CERRADO 
            {
              Expresion RESULT =null;
		System.out.println("REGLA 11.2: instruccion_entrada-> INPUT_FLOAT()"); RESULT = new InputFloat(); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instruccion_entrada",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // instruccion_entrada ::= INPUT_BOOL PAREN_ABIERTO PAREN_CERRADO 
            {
              Expresion RESULT =null;
		System.out.println("REGLA 11.3: instruccion_entrada-> INPUT_BOOL()"); RESULT = new InputBool(); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instruccion_entrada",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // instruccion_entrada ::= INPUT_ARRAY PAREN_ABIERTO LIT_INTEGER PAREN_CERRADO 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		System.out.println("REGLA 11.4: instruccion_entrada-> INPUT_ARRAY()"); RESULT = new InputArray((Integer)i); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("instruccion_entrada",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // promedio_ponderado ::= PROMEDIO_PONDERADO PAREN_ABIERTO list_arg PAREN_CERRADO 
            {
              Expresion RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ParDeArrays la = (ParDeArrays)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
                    System.out.println("REGLA 12.1: promedio_ponderado-> IDENTIFICADOR = PROMEDIO_PONDERADO(lis_arg)");
                    Identificador resultado=PromedioPonderado.crearPPComoAST(contextoStr.getStrYIncrementar(), declaracionesPP, instruccionesPP, tablaSimbolos, la); 
                    RESULT = resultado;
                     
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("promedio_ponderado",28, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // list_arg ::= LIT_ARRAY COMA LIT_ARRAY 
            {
              ParDeArrays RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("REGLA 13.1: list_arg-> LIT_ARRAY COMA LIT_ARRAY");  
            Expresion valores = new Constante(l);
            Expresion pesos = new Constante(li);
            RESULT = new ParDeArrays(valores, pesos,contextoStr.getStr());
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("list_arg",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // list_arg ::= IDENTIFICADOR COMA LIT_ARRAY 
            {
              ParDeArrays RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("REGLA 13.2: list_arg-> IDENTIFICADOR COMA LIT_ARRAY");
            Expresion valores = new Identificador(id.toString());
            Expresion pesos = new Constante(li);
            RESULT = new ParDeArrays(valores, pesos,contextoStr.getStr()); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("list_arg",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // list_arg ::= LIT_ARRAY COMA IDENTIFICADOR 
            {
              ParDeArrays RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("REGLA 13.3: list_arg-> LIT_ARRAY COMA IDENTIFICADOR"); 
            Expresion valores = new Constante(li);
            Expresion pesos = new Identificador(id.toString());
            RESULT = new ParDeArrays(valores, pesos,contextoStr.getStr()); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("list_arg",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // list_arg ::= IDENTIFICADOR COMA IDENTIFICADOR 
            {
              ParDeArrays RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("REGLA 13.4: list_arg-> IDENTIFICADOR COMA IDENTIFICADOR"); 
            Expresion valores = new Identificador(id.toString());
            Expresion pesos = new Identificador(ide.toString());          
            RESULT = new ParDeArrays(valores, pesos, contextoStr.getStr());  
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("list_arg",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
