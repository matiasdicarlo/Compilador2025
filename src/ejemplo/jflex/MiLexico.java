// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/ejemplo/jflex/lexico.flex

/****************************************************************************
 * En esta sección se puede incluir todo código que se copiará textualmente
 * al comienzo del archivo JAVA que contendrá la definición de la clase del 
 * analizador léxico.
 ****************************************************************************/

/* Ejemplo:


*/
package ejemplo.jflex;
import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.sym;
import java.util.Stack;

/****************************************************************************
 * Las siguientes directivas afectan el comportamiento del analizador léxico:
 *
 *  - %class Nombre --> Nombre de la clase generada.
 *
 *  - %type Nombre  --> Nombre de la clase usada para representar token.
 *                      Será el tipo de los objetos retornados por yylex().
 *  - %line         --> El analizador sabrá el número de línea que se está
 *                      analizando. Puede consultarse con this.yyline
 *  - %column       --> El analizador sabrá el número de columna que se está
 *                      analizando. Puede consultarse con this.yycolumn
 *  - %char         --> El analizador sabrá el número de caracter que se está
 *                      analizando. Puede consultarse con this.yychar
 *
 * Existen otras directivas adicionales descriptas en la documentación.
 ****************************************************************************/ 

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class MiLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;
  public static final int COMENTARIO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\0\1\11\3\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\0"+
    "\1\24\1\25\1\26\2\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\40\1\47\1\50\1\51"+
    "\1\52\1\40\1\53\1\40\1\54\1\40\1\55\1\56"+
    "\1\57\1\0\1\60\1\0\1\61\1\62\1\40\1\63"+
    "\1\64\1\65\1\66\1\40\1\67\2\40\1\70\1\71"+
    "\1\72\1\73\1\74\1\40\1\75\1\76\1\77\1\100"+
    "\3\40\1\101\1\40\1\102\1\0\1\103\7\0\1\3"+
    "\32\0\1\104\u01df\0\1\104\177\0\13\104\35\0\2\3"+
    "\5\0\1\104\57\0\1\104\240\0\1\104\377\0\u0100\105";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\1\1\1\17\11\20\1\21\1\22\10\20\1\23"+
    "\1\24\1\25\1\26\1\25\5\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\13\20"+
    "\1\0\1\42\3\0\7\20\1\43\2\20\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\6\20\1\56\4\20\1\0\1\57\1\60\1\61\4\20"+
    "\1\62\10\20\1\63\6\20\1\64\1\0\1\65\5\20"+
    "\1\66\1\20\1\67\11\20\1\0\2\20\1\70\1\71"+
    "\14\20\1\0\11\20\1\72\10\20\1\0\1\20\1\73"+
    "\1\20\1\74\3\20\1\75\1\0\3\20\1\76\4\20"+
    "\2\0\3\20\1\77\1\0\6\20\1\100\1\101\1\0"+
    "\4\20\1\0\4\20\1\102\1\20\1\0\4\20\1\0"+
    "\1\20\2\0\1\103\1\104\1\0\1\105\3\20\1\0"+
    "\1\20\3\0\3\20\1\0\1\106\3\0\2\20\5\0"+
    "\2\20\1\0\1\107\2\0\1\110\2\20\3\0\2\20"+
    "\3\0\1\20\1\111\1\112\1\113\1\114\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\322\0\u0118\0\u015e\0\322"+
    "\0\u01a4\0\u01ea\0\322\0\u0230\0\322\0\322\0\322\0\u0276"+
    "\0\322\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a\0\u0460"+
    "\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690"+
    "\0\322\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a"+
    "\0\u08c0\0\u0906\0\322\0\322\0\322\0\u094c\0\322\0\u0992"+
    "\0\u09d8\0\u0a1e\0\u0a64\0\322\0\322\0\322\0\322\0\322"+
    "\0\u0276\0\322\0\322\0\322\0\322\0\u0aaa\0\u0af0\0\u0b36"+
    "\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66"+
    "\0\u0dac\0\322\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u041a\0\u10ae\0\u10f4\0\322"+
    "\0\322\0\322\0\322\0\322\0\322\0\322\0\322\0\322"+
    "\0\322\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de"+
    "\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u041a\0\u041a\0\u041a"+
    "\0\u1482\0\u14c8\0\u150e\0\u1554\0\u041a\0\u159a\0\u15e0\0\u1626"+
    "\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856"+
    "\0\u189c\0\u18e2\0\u1928\0\u196e\0\u041a\0\u19b4\0\322\0\u19fa"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u041a\0\u1b58\0\u041a\0\u1b9e"+
    "\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce"+
    "\0\u1e14\0\u1e5a\0\u1ea0\0\u041a\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8"+
    "\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8"+
    "\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418"+
    "\0\u245e\0\u24a4\0\u24ea\0\u041a\0\u2530\0\u2576\0\u25bc\0\u2602"+
    "\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u041a\0\u27ec"+
    "\0\u041a\0\u2832\0\u2878\0\u28be\0\u041a\0\u2904\0\u294a\0\u2990"+
    "\0\u29d6\0\u041a\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a"+
    "\0\u2bc0\0\u2c06\0\u2c4c\0\u041a\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64"+
    "\0\u2daa\0\u2df0\0\u2e36\0\u041a\0\322\0\u2e7c\0\u2ec2\0\u2f08"+
    "\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u041a"+
    "\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322"+
    "\0\u3368\0\u33ae\0\u041a\0\u041a\0\u33f4\0\u041a\0\u343a\0\u3480"+
    "\0\u34c6\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0"+
    "\0\u36f6\0\u373c\0\u041a\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a"+
    "\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca"+
    "\0\322\0\u3b10\0\u3b56\0\322\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e"+
    "\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u041a"+
    "\0\322\0\322\0\322\0\u041a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\3\27\1\34\2\27\1\35\3\27"+
    "\1\36\2\27\1\37\3\27\1\40\1\4\1\41\1\4"+
    "\1\42\1\43\2\27\1\44\1\27\1\45\2\27\1\46"+
    "\1\47\1\50\2\27\1\51\2\27\1\52\1\53\2\4"+
    "\10\54\1\55\45\54\1\56\27\54\12\57\1\60\1\57"+
    "\1\61\40\57\1\62\24\57\1\63\3\57\110\0\1\5"+
    "\130\0\1\64\60\0\2\11\4\0\77\11\15\0\1\65"+
    "\104\0\1\66\43\0\1\67\23\0\1\70\24\0\1\71"+
    "\103\0\1\71\1\0\1\22\110\0\1\72\105\0\1\73"+
    "\105\0\1\74\105\0\1\75\102\0\1\27\4\0\26\27"+
    "\3\0\22\27\26\0\1\27\4\0\1\76\17\27\1\77"+
    "\5\27\3\0\22\27\26\0\1\27\4\0\16\27\1\100"+
    "\7\27\3\0\22\27\26\0\1\27\4\0\4\27\1\101"+
    "\3\27\1\102\15\27\3\0\22\27\26\0\1\27\4\0"+
    "\13\27\1\103\1\27\1\104\10\27\3\0\22\27\26\0"+
    "\1\27\4\0\15\27\1\105\10\27\3\0\22\27\26\0"+
    "\1\27\4\0\16\27\1\106\7\27\3\0\22\27\26\0"+
    "\1\27\4\0\20\27\1\107\5\27\3\0\22\27\26\0"+
    "\1\27\4\0\7\27\1\110\16\27\3\0\22\27\5\0"+
    "\6\111\5\0\1\112\2\0\1\113\1\114\1\0\1\115"+
    "\61\0\1\111\23\0\1\27\4\0\26\27\3\0\10\27"+
    "\1\116\1\27\1\117\7\27\26\0\1\27\4\0\26\27"+
    "\3\0\13\27\1\120\6\27\26\0\1\27\4\0\26\27"+
    "\3\0\1\27\1\121\6\27\1\122\11\27\26\0\1\27"+
    "\4\0\26\27\3\0\12\27\1\123\7\27\26\0\1\27"+
    "\4\0\26\27\3\0\13\27\1\124\6\27\26\0\1\27"+
    "\4\0\26\27\3\0\15\27\1\125\4\27\26\0\1\27"+
    "\4\0\26\27\3\0\15\27\1\126\4\27\26\0\1\27"+
    "\4\0\26\27\3\0\15\27\1\127\4\27\20\0\1\130"+
    "\101\0\1\131\61\0\1\132\4\0\1\133\22\0\1\134"+
    "\104\0\1\135\43\0\1\136\23\0\1\137\16\0\1\140"+
    "\105\0\1\141\113\0\1\27\4\0\2\27\1\142\23\27"+
    "\3\0\22\27\26\0\1\27\4\0\4\27\1\143\21\27"+
    "\3\0\22\27\26\0\1\27\4\0\15\27\1\144\10\27"+
    "\3\0\22\27\26\0\1\27\4\0\2\27\1\145\23\27"+
    "\3\0\22\27\26\0\1\27\4\0\21\27\1\146\4\27"+
    "\3\0\22\27\26\0\1\27\4\0\21\27\1\147\4\27"+
    "\3\0\22\27\26\0\1\27\4\0\3\27\1\150\22\27"+
    "\3\0\22\27\26\0\1\27\4\0\17\27\1\151\6\27"+
    "\3\0\22\27\26\0\1\27\4\0\16\27\1\152\7\27"+
    "\3\0\22\27\26\0\1\27\4\0\16\27\1\153\7\27"+
    "\3\0\22\27\26\0\1\27\4\0\4\27\1\154\21\27"+
    "\3\0\22\27\5\0\6\111\10\0\1\113\1\114\1\0"+
    "\1\115\61\0\1\111\21\0\1\114\1\0\1\115\105\0"+
    "\1\155\103\0\1\155\1\0\1\115\105\0\1\27\4\0"+
    "\26\27\3\0\10\27\1\156\11\27\26\0\1\27\4\0"+
    "\26\27\3\0\3\27\1\157\15\27\1\160\26\0\1\27"+
    "\4\0\26\27\3\0\13\27\1\161\6\27\26\0\1\27"+
    "\4\0\26\27\3\0\10\27\1\162\11\27\26\0\1\27"+
    "\4\0\26\27\3\0\13\27\1\163\6\27\26\0\1\27"+
    "\4\0\26\27\3\0\17\27\1\164\2\27\26\0\1\27"+
    "\4\0\26\27\3\0\17\27\1\165\2\27\26\0\1\27"+
    "\4\0\26\27\3\0\13\27\1\166\6\27\26\0\1\27"+
    "\4\0\26\27\3\0\20\27\1\167\1\27\26\0\1\27"+
    "\4\0\12\27\1\170\13\27\3\0\22\27\26\0\1\27"+
    "\4\0\1\171\25\27\3\0\22\27\26\0\1\27\4\0"+
    "\3\27\1\172\16\27\1\173\3\27\3\0\22\27\26\0"+
    "\1\27\4\0\13\27\1\174\12\27\3\0\22\27\26\0"+
    "\1\27\4\0\17\27\1\175\6\27\3\0\22\27\26\0"+
    "\1\27\4\0\4\27\1\176\21\27\3\0\22\27\26\0"+
    "\1\27\4\0\3\27\1\177\13\27\1\200\6\27\3\0"+
    "\1\201\21\27\26\0\1\27\4\0\23\27\1\202\2\27"+
    "\3\0\22\27\26\0\1\27\4\0\17\27\1\203\6\27"+
    "\3\0\22\27\26\0\1\27\4\0\6\27\1\204\17\27"+
    "\3\0\22\27\26\0\1\27\4\0\15\27\1\205\10\27"+
    "\3\0\22\27\5\0\6\206\7\0\1\111\3\0\1\155"+
    "\34\0\1\207\24\0\1\206\23\0\1\27\4\0\26\27"+
    "\3\0\10\27\1\210\11\27\26\0\1\27\4\0\26\27"+
    "\3\0\16\27\1\211\3\27\26\0\1\27\4\0\26\27"+
    "\3\0\1\27\1\212\20\27\26\0\1\27\4\0\26\27"+
    "\3\0\4\27\1\213\15\27\26\0\1\27\4\0\26\27"+
    "\3\0\11\27\1\214\10\27\26\0\1\27\4\0\26\27"+
    "\3\0\4\27\1\215\15\27\26\0\1\27\4\0\24\27"+
    "\1\216\1\27\3\0\22\27\26\0\1\27\4\0\12\27"+
    "\1\217\13\27\3\0\22\27\26\0\1\27\4\0\10\27"+
    "\1\220\15\27\3\0\22\27\26\0\1\27\4\0\10\27"+
    "\1\221\15\27\3\0\22\27\26\0\1\27\4\0\1\222"+
    "\25\27\3\0\22\27\26\0\1\27\4\0\13\27\1\223"+
    "\12\27\3\0\22\27\26\0\1\27\4\0\26\27\3\0"+
    "\1\224\21\27\26\0\1\27\4\0\4\27\1\225\21\27"+
    "\3\0\22\27\26\0\1\27\4\0\20\27\1\226\5\27"+
    "\3\0\22\27\26\0\1\27\4\0\13\27\1\227\12\27"+
    "\3\0\22\27\26\0\1\27\4\0\22\27\1\230\3\27"+
    "\3\0\22\27\12\0\1\231\13\0\1\27\4\0\26\27"+
    "\3\0\22\27\26\0\1\27\4\0\20\27\1\232\5\27"+
    "\3\0\22\27\5\0\6\206\7\0\1\111\40\0\1\207"+
    "\24\0\1\206\23\0\1\27\4\0\26\27\3\0\4\27"+
    "\1\233\15\27\26\0\1\27\4\0\26\27\3\0\4\27"+
    "\1\234\15\27\26\0\1\27\4\0\26\27\3\0\17\27"+
    "\1\235\2\27\26\0\1\27\4\0\26\27\3\0\6\27"+
    "\1\236\13\27\26\0\1\27\4\0\26\27\3\0\4\27"+
    "\1\237\15\27\26\0\1\27\4\0\1\240\25\27\3\0"+
    "\22\27\26\0\1\27\4\0\22\27\1\241\3\27\3\0"+
    "\22\27\26\0\1\27\4\0\15\27\1\242\10\27\3\0"+
    "\22\27\26\0\1\27\4\0\20\27\1\243\5\27\3\0"+
    "\22\27\26\0\1\27\4\0\1\244\25\27\3\0\22\27"+
    "\26\0\1\27\4\0\1\27\1\245\24\27\3\0\22\27"+
    "\26\0\1\27\4\0\2\27\1\246\23\27\3\0\22\27"+
    "\26\0\1\27\4\0\16\27\1\247\7\27\3\0\22\27"+
    "\26\0\1\27\4\0\16\27\1\250\7\27\3\0\22\27"+
    "\26\0\1\27\4\0\26\27\3\0\1\251\21\27\57\0"+
    "\1\252\54\0\1\27\4\0\1\253\25\27\3\0\22\27"+
    "\26\0\1\27\4\0\26\27\3\0\1\27\1\254\20\27"+
    "\26\0\1\27\4\0\26\27\3\0\1\255\21\27\26\0"+
    "\1\27\4\0\26\27\3\0\4\27\1\256\15\27\26\0"+
    "\1\27\4\0\26\27\3\0\3\27\1\257\16\27\26\0"+
    "\1\27\4\0\20\27\1\260\5\27\3\0\22\27\26\0"+
    "\1\27\4\0\10\27\1\261\15\27\3\0\22\27\26\0"+
    "\1\27\4\0\23\27\1\262\2\27\3\0\22\27\26\0"+
    "\1\27\4\0\4\27\1\263\21\27\3\0\22\27\26\0"+
    "\1\27\4\0\25\27\1\264\3\0\22\27\26\0\1\27"+
    "\4\0\1\265\25\27\3\0\22\27\26\0\1\27\4\0"+
    "\13\27\1\266\12\27\3\0\22\27\26\0\1\27\4\0"+
    "\6\27\1\267\17\27\3\0\22\27\26\0\1\27\4\0"+
    "\16\27\1\270\7\27\3\0\22\27\26\0\1\27\4\0"+
    "\1\271\1\272\3\27\1\273\2\27\1\274\15\27\3\0"+
    "\22\27\42\0\1\275\71\0\1\27\4\0\14\27\1\276"+
    "\11\27\3\0\22\27\26\0\1\27\4\0\26\27\3\0"+
    "\12\27\1\277\7\27\26\0\1\27\4\0\26\27\3\0"+
    "\1\27\1\300\20\27\26\0\1\27\4\0\26\27\3\0"+
    "\15\27\1\301\4\27\26\0\1\27\4\0\26\27\3\0"+
    "\7\27\1\302\12\27\26\0\1\27\4\0\3\27\1\303"+
    "\22\27\3\0\22\27\26\0\1\27\4\0\16\27\1\304"+
    "\7\27\3\0\22\27\26\0\1\27\4\0\4\27\1\305"+
    "\21\27\3\0\22\27\24\0\1\306\1\0\1\27\4\0"+
    "\26\27\3\0\22\27\26\0\1\27\4\0\2\27\1\307"+
    "\23\27\3\0\22\27\26\0\1\27\4\0\1\310\25\27"+
    "\3\0\22\27\26\0\1\27\4\0\20\27\1\311\5\27"+
    "\3\0\22\27\26\0\1\27\4\0\17\27\1\312\6\27"+
    "\3\0\22\27\26\0\1\27\4\0\20\27\1\313\5\27"+
    "\3\0\22\27\26\0\1\27\4\0\16\27\1\314\7\27"+
    "\3\0\22\27\26\0\1\27\4\0\13\27\1\315\12\27"+
    "\3\0\22\27\26\0\1\27\4\0\15\27\1\316\10\27"+
    "\3\0\22\27\37\0\1\317\72\0\1\320\1\0\1\27"+
    "\4\0\26\27\3\0\22\27\26\0\1\27\4\0\26\27"+
    "\3\0\15\27\1\321\4\27\26\0\1\27\4\0\26\27"+
    "\3\0\13\27\1\322\6\27\26\0\1\27\4\0\26\27"+
    "\3\0\1\323\21\27\26\0\1\27\4\0\15\27\1\324"+
    "\10\27\3\0\22\27\54\0\1\325\57\0\1\27\4\0"+
    "\12\27\1\326\13\27\3\0\22\27\26\0\1\27\4\0"+
    "\20\27\1\327\5\27\3\0\22\27\26\0\1\27\4\0"+
    "\1\330\25\27\3\0\22\27\26\0\1\27\4\0\20\27"+
    "\1\331\5\27\3\0\22\27\26\0\1\27\4\0\16\27"+
    "\1\332\7\27\3\0\22\27\26\0\1\27\4\0\16\27"+
    "\1\333\7\27\3\0\22\27\26\0\1\27\4\0\22\27"+
    "\1\334\3\27\3\0\22\27\50\0\1\335\111\0\1\336"+
    "\57\0\1\27\4\0\26\27\3\0\15\27\1\337\4\27"+
    "\26\0\1\27\4\0\26\27\3\0\1\340\21\27\26\0"+
    "\1\27\4\0\2\27\1\341\10\27\1\342\12\27\3\0"+
    "\22\27\37\0\1\343\74\0\1\27\4\0\24\27\1\344"+
    "\1\27\3\0\22\27\26\0\1\27\4\0\4\27\1\345"+
    "\21\27\3\0\22\27\26\0\1\27\4\0\14\27\1\346"+
    "\11\27\3\0\22\27\26\0\1\27\4\0\1\347\25\27"+
    "\3\0\22\27\26\0\1\27\4\0\13\27\1\350\12\27"+
    "\3\0\22\27\26\0\1\27\4\0\1\351\25\27\3\0"+
    "\22\27\37\0\1\352\74\0\1\27\4\0\26\27\3\0"+
    "\1\27\1\353\20\27\26\0\1\27\4\0\26\27\3\0"+
    "\14\27\1\354\5\27\26\0\1\27\4\0\16\27\1\355"+
    "\7\27\3\0\22\27\26\0\1\27\4\0\16\27\1\356"+
    "\7\27\3\0\22\27\35\0\1\357\76\0\1\27\4\0"+
    "\1\360\25\27\3\0\22\27\24\0\1\361\1\0\1\27"+
    "\4\0\26\27\3\0\22\27\24\0\1\362\1\0\1\27"+
    "\4\0\26\27\3\0\22\27\26\0\1\27\4\0\25\27"+
    "\1\363\3\0\22\27\26\0\1\27\4\0\22\27\1\364"+
    "\3\27\3\0\22\27\35\0\1\365\76\0\1\27\4\0"+
    "\26\27\3\0\21\27\1\366\26\0\1\27\4\0\26\27"+
    "\3\0\13\27\1\367\6\27\26\0\1\27\4\0\15\27"+
    "\1\370\10\27\3\0\22\27\26\0\1\27\4\0\16\27"+
    "\1\371\7\27\3\0\22\27\55\0\1\372\56\0\1\27"+
    "\4\0\20\27\1\373\5\27\3\0\22\27\54\0\1\374"+
    "\105\0\1\375\106\0\1\376\56\0\1\27\4\0\26\27"+
    "\3\0\12\27\1\377\7\27\26\0\1\27\4\0\3\27"+
    "\1\u0100\22\27\3\0\22\27\26\0\1\27\4\0\17\27"+
    "\1\u0101\6\27\3\0\22\27\43\0\1\u0102\70\0\1\27"+
    "\4\0\3\27\1\u0103\22\27\3\0\22\27\37\0\1\u0104"+
    "\105\0\1\u0105\111\0\1\u0106\70\0\1\27\4\0\26\27"+
    "\3\0\3\27\1\u0107\16\27\26\0\1\27\4\0\10\27"+
    "\1\u0108\15\27\3\0\22\27\12\0\1\u0109\13\0\1\27"+
    "\4\0\26\27\3\0\22\27\51\0\1\u010a\71\0\1\u010b"+
    "\105\0\1\u010c\121\0\1\u010d\62\0\1\27\4\0\26\27"+
    "\3\0\4\27\1\u010e\15\27\26\0\1\27\4\0\22\27"+
    "\1\u010f\3\27\3\0\22\27\57\0\1\u0110\76\0\1\u0111"+
    "\112\0\1\u0112\105\0\1\u0113\100\0\1\u0114\63\0\1\27"+
    "\4\0\26\27\3\0\15\27\1\u0115\4\27\26\0\1\27"+
    "\4\0\10\27\1\u0116\15\27\3\0\22\27\42\0\1\u0117"+
    "\106\0\1\u0118\105\0\1\u0119\70\0\1\27\4\0\26\27"+
    "\3\0\1\27\1\u011a\20\27\26\0\1\27\4\0\16\27"+
    "\1\u011b\7\27\3\0\22\27\37\0\1\u011c\117\0\1\u011d"+
    "\105\0\1\u011e\62\0\1\27\4\0\26\27\3\0\3\27"+
    "\1\u011f\16\27\26\0\1\27\4\0\15\27\1\u0120\10\27"+
    "\3\0\22\27\50\0\1\u0121\105\0\1\u0122\105\0\1\u0123"+
    "\63\0\1\27\4\0\26\27\3\0\13\27\1\u0124\6\27"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16030];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\2\1\1\11\1\1\3\11"+
    "\1\1\1\11\17\1\1\11\11\1\3\11\1\1\1\11"+
    "\4\1\5\11\1\1\4\11\13\1\1\0\1\11\3\0"+
    "\12\1\12\11\13\1\1\0\30\1\1\0\1\11\21\1"+
    "\1\0\20\1\1\0\22\1\1\0\10\1\1\0\10\1"+
    "\2\0\4\1\1\0\7\1\1\11\1\0\4\1\1\0"+
    "\6\1\1\0\4\1\1\0\1\1\2\0\2\1\1\0"+
    "\4\1\1\0\1\1\3\0\3\1\1\0\1\1\3\0"+
    "\2\1\5\0\2\1\1\0\1\11\2\0\1\11\2\1"+
    "\3\0\2\1\3\0\2\1\3\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /*************************************************************************
    * En esta sección se puede incluir código que se copiará textualmente
    * como parte de la definición de la clase del analizador léxico.
    * Típicamente serán variables de instancia o nuevos métodos de la clase.
    *************************************************************************/
    
    public ArrayList<MiToken> tablaDeSimbolos = new ArrayList<>();
 
    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }
    private MiToken token(String nombre, int line, int column, Object valor) {
        return new MiToken(nombre, line, column, valor);
    }
    /* Variables para reconocer Strings */
    StringBuffer string = new StringBuffer();
    int string_yyline = 0;
    int string_yycolumn = 0;

    Stack<Character> comentarioPila = new Stack<>();
    int nivelComentario = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case CADENA: {
              throw new Error("Fin de archivo dentro de la cadena: \n" +
                                         string.toString());
            }  // fall though
            case 293: break;
            case COMENTARIO: {
              if (!comentarioPila.isEmpty()) {
            throw new Error("Error: Fin de archivo con comentario no cerrado. Se esperaba cierre para " + comentarioPila.peek());
        }
            }  // fall though
            case 294: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Carácter inválido <"+yytext()+">");
            }
            // fall through
          case 78: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 79: break;
          case 3:
            { string.setLength(0);
                     string_yyline = this.yyline;
                     string_yycolumn = this.yycolumn;
                     yybegin(CADENA);
            }
            // fall through
          case 80: break;
          case 4:
            { /* Ignorar */
            }
            // fall through
          case 81: break;
          case 5:
            { return token("PAREN_ABIERTO", yytext());
            }
            // fall through
          case 82: break;
          case 6:
            { return token("PAREN_CERRADO", yytext());
            }
            // fall through
          case 83: break;
          case 7:
            { return token("OP_MUL", yytext());
            }
            // fall through
          case 84: break;
          case 8:
            { return token("OP_SUM", yytext());
            }
            // fall through
          case 85: break;
          case 9:
            { return token("COMA", yytext());
            }
            // fall through
          case 86: break;
          case 10:
            { return token("OP_SUB", yytext());
            }
            // fall through
          case 87: break;
          case 11:
            { return token("OP_DIV", yytext());
            }
            // fall through
          case 88: break;
          case 12:
            { return token("LIT_INTEGER", Integer.parseInt(yytext()));
            }
            // fall through
          case 89: break;
          case 13:
            { return token("DECLARACION", yytext());
            }
            // fall through
          case 90: break;
          case 14:
            { return token("OP_ME", yytext());
            }
            // fall through
          case 91: break;
          case 15:
            { return token("OP_MA", yytext());
            }
            // fall through
          case 92: break;
          case 16:
            { return token("IDENTIFICADOR", yytext());
            }
            // fall through
          case 93: break;
          case 17:
            { return token("CORCHETE_ABIERTO", yytext());
            }
            // fall through
          case 94: break;
          case 18:
            { return token("CORCHETE_CERRADO", yytext());
            }
            // fall through
          case 95: break;
          case 19:
            { return token("LLAVE_ABIERTO", yytext());
            }
            // fall through
          case 96: break;
          case 20:
            { return token("LLAVE_CERRADO", yytext());
            }
            // fall through
          case 97: break;
          case 21:
            { string.append(yytext());
            }
            // fall through
          case 98: break;
          case 22:
            { yybegin(YYINITIAL);
                         return token("LIT_STRING",
                                      string_yyline, string_yycolumn,
                                      string.toString());
            }
            // fall through
          case 99: break;
          case 23:
            { /* Ignorar otros caracteres dentro del comentario */
            }
            // fall through
          case 100: break;
          case 24:
            { return token("OP_NEQ", yytext());
            }
            // fall through
          case 101: break;
          case 25:
            { comentarioPila.push('('); nivelComentario = 1; yybegin(COMENTARIO);
            }
            // fall through
          case 102: break;
          case 26:
            { throw new Error("Error: Se encontró '*)' sin haber abierto un comentario.");
            }
            // fall through
          case 103: break;
          case 27:
            { throw new Error("Error: Se encontró '*]' sin haber abierto un comentario.");
            }
            // fall through
          case 104: break;
          case 28:
            { throw new Error("Error: Se encontró '*}' sin haber abierto un comentario.");
            }
            // fall through
          case 105: break;
          case 29:
            { return token("LIT_FLOAT", Float.parseFloat(yytext()));
            }
            // fall through
          case 106: break;
          case 30:
            { return token("ASIGNACION", yytext());
            }
            // fall through
          case 107: break;
          case 31:
            { return token("OP_MEI", yytext());
            }
            // fall through
          case 108: break;
          case 32:
            { return token("OP_IGUAL", yytext());
            }
            // fall through
          case 109: break;
          case 33:
            { return token("OP_MAI", yytext());
            }
            // fall through
          case 110: break;
          case 34:
            { throw new Error("Error: Se encontró '[*' sin haber abierto un (*.");
            }
            // fall through
          case 111: break;
          case 35:
            { return token("OP_OR", yytext());
            }
            // fall through
          case 112: break;
          case 36:
            { throw new Error("Error: Se encontró '{*' sin haber abierto un [*.");
            }
            // fall through
          case 113: break;
          case 37:
            { string.append("\"") ;
            }
            // fall through
          case 114: break;
          case 38:
            { string.append("\n");
            }
            // fall through
          case 115: break;
          case 39:
            { string.append("\t");
            }
            // fall through
          case 116: break;
          case 40:
            { comentarioPila.push('('); nivelComentario = 1;
            }
            // fall through
          case 117: break;
          case 41:
            { if (!comentarioPila.isEmpty() && comentarioPila.peek() == '(' && nivelComentario == 1){
            comentarioPila.pop();
            nivelComentario = 3;
            if (comentarioPila.isEmpty()) yybegin(YYINITIAL);
        } else {
            throw new Error("Error de balanceo: Se esperaba cierre para " + comentarioPila.peek());
        }
            }
            // fall through
          case 118: break;
          case 42:
            { if (!comentarioPila.isEmpty() && comentarioPila.peek() == '[' && nivelComentario == 2){
            comentarioPila.pop();
            nivelComentario = 1;
        } else {
            throw new Error("Error de balanceo: Se esperaba cierre para " + comentarioPila.peek());
        }
            }
            // fall through
          case 119: break;
          case 43:
            { if (!comentarioPila.isEmpty() && comentarioPila.peek() == '{' && nivelComentario == 3){
            comentarioPila.pop();
            nivelComentario = 2;         
        } else {
            throw new Error("Error de balanceo: Se esperaba cierre para " + comentarioPila.peek());
        }
            }
            // fall through
          case 120: break;
          case 44:
            { comentarioPila.push('['); nivelComentario = 2;
            }
            // fall through
          case 121: break;
          case 45:
            { comentarioPila.push('{'); nivelComentario = 3;
            }
            // fall through
          case 122: break;
          case 46:
            { return token("END", yytext());
            }
            // fall through
          case 123: break;
          case 47:
            { return token("ALL", yytext());
            }
            // fall through
          case 124: break;
          case 48:
            { return token("OP_AND", yytext());
            }
            // fall through
          case 125: break;
          case 49:
            { return token("ANY", yytext());
            }
            // fall through
          case 126: break;
          case 50:
            { return token("OP_NOT", yytext());
            }
            // fall through
          case 127: break;
          case 51:
            { return token("ELSE", yytext());
            }
            // fall through
          case 128: break;
          case 52:
            { return token("THEN", yytext());
            }
            // fall through
          case 129: break;
          case 53:
            { return token("LIT_ARRAY", yytext());
            }
            // fall through
          case 130: break;
          case 54:
            { return token("LIT_BOOLEAN", yytext() );
            }
            // fall through
          case 131: break;
          case 55:
            { return token("BREAK", yytext());
            }
            // fall through
          case 132: break;
          case 56:
            { return token("LIT_BOOLEAN", yytext());
            }
            // fall through
          case 133: break;
          case 57:
            { return token("TYPE_FLOAT", yytext());
            }
            // fall through
          case 134: break;
          case 58:
            { return token("DISPLAY", yytext());
            }
            // fall through
          case 135: break;
          case 59:
            { return token("TYPE_BOOLEAN", yytext());
            }
            // fall through
          case 136: break;
          case 60:
            { return token("TYPE_INTEGER", yytext());
            }
            // fall through
          case 137: break;
          case 61:
            { return token("CONTINUE", yytext());
            }
            // fall through
          case 138: break;
          case 62:
            { return token("END_LOOP", yytext());
            }
            // fall through
          case 139: break;
          case 63:
            { return token("CONDITION", yytext());
            }
            // fall through
          case 140: break;
          case 64:
            { return token("INPUT_INT", yytext());
            }
            // fall through
          case 141: break;
          case 65:
            { return token("LOOP_WHEN", yytext());
            }
            // fall through
          case 142: break;
          case 66:
            { return token("INPUT_BOOL", yytext());
            }
            // fall through
          case 143: break;
          case 67:
            { return token("INPUT_ARRAY", yytext());
            }
            // fall through
          case 144: break;
          case 68:
            { return token("INPUT_FLOAT", yytext());
            }
            // fall through
          case 145: break;
          case 69:
            { return token("TYPE_FLOAT_ARRAY", yytext());
            }
            // fall through
          case 146: break;
          case 70:
            { return token("ELSE_BACKWARD", yytext());
            }
            // fall through
          case 147: break;
          case 71:
            { return token("DECLARE_SECTION", yytext());
            }
            // fall through
          case 148: break;
          case 72:
            { return token("PROGRAM_SECTION", yytext());
            }
            // fall through
          case 149: break;
          case 73:
            { return token("BACKWARD_CONDITION", yytext());
            }
            // fall through
          case 150: break;
          case 74:
            { return token("BACKWARD_LOOP_WHEN", yytext());
            }
            // fall through
          case 151: break;
          case 75:
            { return token("ENDDECLARE_SECTION", yytext());
            }
            // fall through
          case 152: break;
          case 76:
            { return token("ENDPROGRAM_SECTION", yytext());
            }
            // fall through
          case 153: break;
          case 77:
            { return token("PROMEDIO_PONDERADO", yytext());
            }
            // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
